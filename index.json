{
  "api/Lett.Extensions.IntExtensions.html": {
    "href": "api/Lett.Extensions.IntExtensions.html",
    "title": "Class IntExtensions | Lett.Extensions",
    "keywords": "Class IntExtensions Int 扩展方法 Inheritance Object IntExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class IntExtensions Methods | Improve this Doc View Source GetEnumDescription(Int32, Type) 获取对应枚举的描述 Declaration public static string GetEnumDescription(this int this, Type enumType) Parameters Type Name Description Int32 this Type enumType 枚举类型 Returns Type Description String 获取失败 返回null Examples enum MyEnum { [System.ComponentModel.Description(\"这里是EnumValue0的说明\")] EnumValue0 = 0, } 0.GetEnumDescription(typeof(MyEnum); // \"这里是EnumValue0的说明\" Exceptions Type Condition ArgumentNullException enumType 为空 ArgumentException enumType 不是枚举类型 ArgumentNullException ArgumentException NotSupportedException AmbiguousMatchException TypeLoadException | Improve this Doc View Source IsEven(Int32) 是否偶数 Declaration public static bool IsEven(this int this) Parameters Type Name Description Int32 this Returns Type Description Boolean Examples 0.IsEven(); // true | Improve this Doc View Source IsInRange(Int32, Int32, Int32) 是否在指定范围内 Declaration public static bool IsInRange(this int this, int min, int max) Parameters Type Name Description Int32 this Int32 min 最小值 Int32 max 最大值 Returns Type Description Boolean Examples (-1).IsInRange(0, 10); // false 10.IsInRange(0, 10); // true | Improve this Doc View Source IsOdd(Int32) 是否奇数 Declaration public static bool IsOdd(this int this) Parameters Type Name Description Int32 this Returns Type Description Boolean Examples (-1).IsOdd(); // true | Improve this Doc View Source Times(Int32, Action) 执行次数操作，次数基于 this Declaration public static void Times(this int this, Action action) Parameters Type Name Description Int32 this Action action 执行的操作 Examples var rs = 0; 10.Times(() => rs += 1); // rs == 10 Exceptions Type Condition ArgumentOutOfRangeException 执行次数 this 小于0 | Improve this Doc View Source Times(Int32, Action<Int32>) 执行次数操作，次数基于 this Declaration public static void Times(this int this, Action<int> action) Parameters Type Name Description Int32 this Action < Int32 > action 执行的操作(参数是从0开始的 index) Examples var rs2 = 0; 10.Times(i => rs2 += i); // rs2 == 45 Exceptions Type Condition ArgumentOutOfRangeException 执行次数 this 小于0"
  },
  "api/Lett.Extensions.DataTableExtensions.html": {
    "href": "api/Lett.Extensions.DataTableExtensions.html",
    "title": "Class DataTableExtensions | Lett.Extensions",
    "keywords": "Class DataTableExtensions DataTable 扩展方法 Inheritance Object DataTableExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class DataTableExtensions Fields | Improve this Doc View Source SupportedDataTypes DataTable 支持的数据类型 参考： https://docs.microsoft.com/zh-cn/dotnet/api/system.data.datacolumn.datatype?view=netcore-2.0 Declaration public static readonly IReadOnlyList<Type> SupportedDataTypes Field Value Type Description IReadOnlyList < Type > Methods | Improve this Doc View Source ColumnsEnumerable(DataTable) 获取DataColumn可枚举对象 Declaration public static IEnumerable<DataColumn> ColumnsEnumerable(this DataTable this) Parameters Type Name Description DataTable this Returns Type Description IEnumerable < DataColumn > Examples var rs = dataTable.ColumnsEnumerable(); Exceptions Type Condition ArgumentNullException DataColumn 为空 InvalidCastException | Improve this Doc View Source FirstRow(DataTable) 获取首行 Declaration public static DataRow FirstRow(this DataTable this) Parameters Type Name Description DataTable this Returns Type Description DataRow Examples dataTable.FirstRow(); Exceptions Type Condition ArgumentException 当前DataTable没有行 | Improve this Doc View Source GetColumnDataType(DataTable, Int32) 获取Column的数据类型 Declaration public static Type GetColumnDataType(this DataTable this, int index) Parameters Type Name Description DataTable this Int32 index 索引 Returns Type Description Type Examples var columnType = dataTable.GetColumnDataType(-1); Exceptions Type Condition ArgumentOutOfRangeException index 索引超出了数组范围 | Improve this Doc View Source GetColumnDataType(DataTable, String) 获取Column的数据类型 Declaration public static Type GetColumnDataType(this DataTable this, string columnName) Parameters Type Name Description DataTable this String columnName 列名 Returns Type Description Type Examples var columnType = dt.GetColumnDataType(\"columnName\"); Exceptions Type Condition ArgumentException DataTable中不包含 columnName | Improve this Doc View Source HasRows(DataTable) 是否存在数据行 Declaration public static bool HasRows(this DataTable this) Parameters Type Name Description DataTable this Returns Type Description Boolean Examples dataTable.HasRows(); | Improve this Doc View Source LastRow(DataTable) 获取末行 Declaration public static DataRow LastRow(this DataTable this) Parameters Type Name Description DataTable this Returns Type Description DataRow Examples dataTable.LastRow(); Exceptions Type Condition ArgumentException 当前DataTable没有行 | Improve this Doc View Source RowsEnumerable(DataTable) 获取DataRow可枚举对象 Declaration public static IEnumerable<DataRow> RowsEnumerable(this DataTable this) Parameters Type Name Description DataTable this Returns Type Description IEnumerable < DataRow > Examples var rs = dataTable.RowsEnumerable(); Exceptions Type Condition ArgumentNullException DataRow 为空 InvalidCastException | Improve this Doc View Source ToDynamicObjects(DataTable) 转换为动态对象集合 值为 Value 转换为 Null Declaration public static IEnumerable<dynamic> ToDynamicObjects(this DataTable this) Parameters Type Name Description DataTable this Returns Type Description IEnumerable < Object > Examples var dt = new DataTable(); dt.Columns.Add(\"col1\", typeof(string)); dt.Columns.Add(\"col2\", typeof(DateTime)); dt.Columns.Add(\"col3\", typeof(decimal)); dt.Columns.Add(\"col4\", typeof(string)); dt.Columns.Add(\"col5\", typeof(string)); dt.Rows.Add(\"strVal\", new DateTime(2019, 4, 1), 100.23m, DBNull.Value, null); dt.Rows.Add(\"strVal2\", new DateTime(2019, 4, 2), 122.23m, DBNull.Value, null); var rs = dt.ToDynamicObjects().ToList(); // rs[0].col1 == \"strVal\" // rs[0].col2 == new DateTime(2019, 4, 1) // rs[1].col3 == 122.23m // rs[1].col4 is null // rs[1].col5 is null | Improve this Doc View Source ToEntityList<T>(DataTable) 转换为实体列表 使用 DataRow 中的值，填充 目标类型 的 FieldInfo 与 PropertyInfo 匹配规则: FieldInfo .Name 或 PropertyInfo .Name 与 ColumnName 相同 Declaration public static List<T> ToEntityList<T>(this DataTable this) where T : class, new() Parameters Type Name Description DataTable this Returns Type Description List <T> 返回 List< T > Type Parameters Name Description T 目标类型 Examples var rs = dataTable.ToEntityList<TestClass1>(); Exceptions Type Condition ArgumentNullException this . DataRow 为空 InvalidCastException FieldAccessException TargetException ArgumentException MethodAccessException TargetInvocationException ArgumentNullException this . RowsEnumerable(DataTable) 为空 | Improve this Doc View Source ToEntityList<T>(DataTable, Func<DataRow, T, T>) 转换为实体列表 Declaration public static List<T> ToEntityList<T>(this DataTable this, Func<DataRow, T, T> converter) where T : class, new() Parameters Type Name Description DataTable this Func < DataRow , T, T> converter 参数 DataRow : 当前行 参数 T : 目标新实例 Returns Type Description List <T> 返回 List< T > Type Parameters Name Description T 目标类型 Examples var rs = dt.ToEntityList<TestClass1>((row, newObj) => { newObj.PublicField = row.Cell<string>(\"PublicField\"); return newObj; }); | Improve this Doc View Source Update<T>(DataTable, Func<DataRow, Boolean>, String, T) 更新 出现异常时，使用 DBNull.Value 进行填充 Declaration public static void Update<T>(this DataTable this, Func<DataRow, bool> selector, string columnName, T value) Parameters Type Name Description DataTable this Func < DataRow , Boolean > selector DataRow 选择器 String columnName 列名 T value Type Parameters Name Description T Examples dataTable.Update(row=> row[\"FRowId\"].toString().Equals(\"rowId\"), \"FName\", \"this is name\"); // it like SQL: UPDATE [table] SET FName = 'this is name' WHERE FRowId = 'rowId' Exceptions Type Condition ArgumentNullException columnName is null ArgumentNullException T is null ArgumentException columnName not exist | Improve this Doc View Source Update<T>(DataTable, Func<DataRow, Boolean>, String, Func<Int32, DataRow, T>) 更新 出现异常时，使用 DBNull.Value 进行填充 Declaration public static void Update<T>(this DataTable this, Func<DataRow, bool> selector, string columnName, Func<int, DataRow, T> func) Parameters Type Name Description DataTable this Func < DataRow , Boolean > selector DataRow 选择器 String columnName 列名 Func < Int32 , DataRow , T> func 委托方法 int: index DataRow: 当前 DataRow Type Parameters Name Description T Examples _testTable1.Update(row=>true, \"FName\", (i, row) => $\"{i}_{row[\"FRowId\"]}\"); Exceptions Type Condition ArgumentNullException columnName is null ArgumentNullException T is null ArgumentException columnName not exist | Improve this Doc View Source Update<T>(DataTable, String, T) 更新 出现异常时，使用 DBNull.Value 进行填充 Declaration public static void Update<T>(this DataTable this, string columnName, T value) Parameters Type Name Description DataTable this String columnName 列名 T value Type Parameters Name Description T Examples _testTable1.Update(\"FName\", \"a\"); // it like SQL: UPDATE [table] set FName = 'a' Exceptions Type Condition ArgumentNullException columnName is null ArgumentNullException T is null ArgumentException columnName not exist"
  },
  "api/Lett.Extensions.ByteExtensions.html": {
    "href": "api/Lett.Extensions.ByteExtensions.html",
    "title": "Class ByteExtensions | Lett.Extensions",
    "keywords": "Class ByteExtensions Bytes 扩展方法 Inheritance Object ByteExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class ByteExtensions Methods | Improve this Doc View Source EncodeToString(Byte[]) 转换为字符串 默认Encoding.UTF8 Declaration public static string EncodeToString(this byte[] this) Parameters Type Name Description Byte [] this Returns Type Description String Examples bytes.ToString(Encoding.UTF8); Exceptions Type Condition ArgumentException this ArgumentNullException this DecoderFallbackException | Improve this Doc View Source EncodeToString(Byte[], Encoding) 转换为字符串 Declaration public static string EncodeToString(this byte[] this, Encoding encoding) Parameters Type Name Description Byte [] this Encoding encoding 编码格式 Returns Type Description String Examples bytes.ToString(Encoding.UTF8); Exceptions Type Condition ArgumentException this ArgumentNullException this ArgumentNullException encoding DecoderFallbackException"
  },
  "api/Lett.Extensions.DataRowExtensions.html": {
    "href": "api/Lett.Extensions.DataRowExtensions.html",
    "title": "Class DataRowExtensions | Lett.Extensions",
    "keywords": "Class DataRowExtensions DataRow 扩展方法 Inheritance Object DataRowExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class DataRowExtensions Methods | Improve this Doc View Source Cell<T>(DataRow, String) 获取当前行中某个列的值 Declaration public static T Cell<T>(this DataRow this, string columnName) where T : IConvertible Parameters Type Name Description DataRow this String columnName 列名 Returns Type Description T columnName 不存在 或 转换失败，返回 default( T ) Type Parameters Name Description T 目标类型，约束为 IConvertible Examples var rs = dataRow.Cell<string>(\"columnName\"); // if fail return default(string) | Improve this Doc View Source Cell<T>(DataRow, String, T) 获取当前行中某个列的值 Declaration public static T Cell<T>(this DataRow this, string columnName, T defaultValue) where T : IConvertible Parameters Type Name Description DataRow this String columnName 列名 T defaultValue 默认值 Returns Type Description T columnName 不存在 或 转换失败，返回 defaultValue Type Parameters Name Description T 目标类型，约束为 IConvertible Examples var rs = dataRow.Cell(\"columnName\", \"abc\"); // if fail return \"abc\" | Improve this Doc View Source Cell<T>(DataRow, String, Func<T>) 获取当前行中某个列的值 Declaration public static T Cell<T>(this DataRow this, string columnName, Func<T> func) where T : IConvertible Parameters Type Name Description DataRow this String columnName 列名 Func <T> func Returns Type Description T columnName 不存在 或 转换失败，返回 func Type Parameters Name Description T 目标类型，约束为 IConvertible Examples var rs = dataRow.Cell<string>(\"columnName\", () => \"func return value\"); | Improve this Doc View Source HasColumn(DataRow, String) 列是否存在 Declaration public static bool HasColumn(this DataRow this, string columnName) Parameters Type Name Description DataRow this String columnName 列名 Returns Type Description Boolean Examples row.HasColumn(\"FRowId\"); Exceptions Type Condition ArgumentNullException columnName is null or empty ArgumentException | Improve this Doc View Source SetValue<T>(DataRow, String, T) 设置值 出现异常时，使用 DBNull.Value 进行填充 Declaration public static void SetValue<T>(this DataRow this, string columnName, T value) Parameters Type Name Description DataRow this String columnName T value Type Parameters Name Description T Examples row.SetValue(\"FColumnName\", \"value\"); // if column \"FColumnName\" type is bool, row[\"FColumnName\"] is DBNull.Value Exceptions Type Condition ArgumentNullException columnName is null ArgumentNullException T is null ArgumentException columnName not exist | Improve this Doc View Source SetValue<T>(DataRow, String, T, Boolean) 设置值 Declaration public static void SetValue<T>(this DataRow this, string columnName, T value, bool isDefaultDbNull) Parameters Type Name Description DataRow this String columnName 列名 T value 值 Boolean isDefaultDbNull 赋值出现异常时，是否使用 DBNull.Value 进行填充 Type Parameters Name Description T Examples row.SetValue(\"FColumnName\", \"value\", true); // if column \"FColumnName\" type is bool, row[\"FColumnName\"] is DBNull.Value Exceptions Type Condition ArgumentNullException columnName is null ArgumentNullException T is null ArgumentException columnName not exist | Improve this Doc View Source ToDynamicObject(DataRow) 转换为动态对象集合 值为 Value 转换为 Null Declaration public static dynamic ToDynamicObject(this DataRow this) Parameters Type Name Description DataRow this Returns Type Description Object 如果Cell为 Value 则动态对象属性的值为 null Examples var dt = new DataTable(); dt.Columns.Add(\"col1\", typeof(string)); dt.Columns.Add(\"col2\", typeof(DateTime)); dt.Columns.Add(\"col3\", typeof(decimal)); dt.Columns.Add(\"col4\", typeof(string)); dt.Columns.Add(\"col5\", typeof(string)); dt.Rows.Add(\"strVal\", new DateTime(2019, 4, 1), 100.23m, DBNull.Value, null); var rs = dt.Rows[0].ToDynamicObject(); // rs.col1 == \"strVal\" // rs.col2 == new DateTime(2019, 4, 1) // rs.col3 == 100.23m // rs.col4 is null // rs.col5 is null | Improve this Doc View Source ToEntity<T>(DataRow) 转换为实体 使用 DataRow 中的值，填充 目标类型 的 FieldInfo 与 PropertyInfo 匹配规则: FieldInfo .Name 或 PropertyInfo .Name 与 ColumnName 相同 Declaration public static T ToEntity<T>(this DataRow this) where T : class, new() Parameters Type Name Description DataRow this Returns Type Description T 目标对象 T Type Parameters Name Description T 目标类型 Examples dataTable.Rows[0].ToEntity<TestClass1>(); Exceptions Type Condition FieldAccessException TargetException ArgumentException MethodAccessException TargetInvocationException | Improve this Doc View Source ToEntity<T>(DataRow, Func<DataRow, T, T>) 转换为实体 Declaration public static T ToEntity<T>(this DataRow this, Func<DataRow, T, T> converter) where T : class, new() Parameters Type Name Description DataRow this Func < DataRow , T, T> converter 参数 DataRow : 当前行 参数 T : 目标新实例 Returns Type Description T 目标对象 T Type Parameters Name Description T 目标类型 Examples var rs = dt.Rows[0].ToEntity<TestClass1>((row, newClass) => { newClass.Property1 = row.Cell<string>(\"Property1\"); newClass.PublicField1 = row.Cell<string>(\"PublicField1\"); return newClass; });"
  },
  "api/Lett.Extensions.ArrayExtensions.html": {
    "href": "api/Lett.Extensions.ArrayExtensions.html",
    "title": "Class ArrayExtensions | Lett.Extensions",
    "keywords": "Class ArrayExtensions Array 扩展方法 Inheritance Object ArrayExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class ArrayExtensions Methods | Improve this Doc View Source ClearAll(Array) 将所有元素设置为元素类型的默认值 Declaration public static void ClearAll(this Array this) Parameters Type Name Description Array this Examples var s = new[] {\"aaa\", \"bbb\"}; s.ClearAll(); // s.Length == 2; // s[0] == null; var s = new[] {11, 22}; s.ClaerAll(); // s.Length == 2; // s[0] == 0; // s[1] == 1; | Improve this Doc View Source ClearAll<T>(T[]) 将所有元素设置为元素类型的默认值 Declaration public static void ClearAll<T>(this T[] this) Parameters Type Name Description T[] this Type Parameters Name Description T 数组的元素类型 Examples var s = new[] {\"aaa\", \"bbb\"}; s.ClearAll(); // s.Length == 2; // s[0] == null; var s = new[] {11, 22}; s.ClaerAll(); // s.Length == 2; // s[0] == 0; // s[1] == 1; | Improve this Doc View Source ContainsIndex(Array, Int32) 是否包含索引 Declaration public static bool ContainsIndex(this Array this, int index) Parameters Type Name Description Array this Int32 index 索引 Returns Type Description Boolean Examples var s = new[] {\"aaa\", \"bbb\"}; s.ContainsIndex(0); // true s.ContainsIndex(2); // false Exceptions Type Condition ArgumentNullException 数组为空 | Improve this Doc View Source ContainsIndex<T>(T[], Int32) 是否包含索引 Declaration public static bool ContainsIndex<T>(this T[] this, int index) Parameters Type Name Description T[] this Int32 index 索引 Returns Type Description Boolean Type Parameters Name Description T 数组的元素类型 Examples var s = new[] {\"aaa\", \"bbb\"}; s.ContainsIndex(0); // true s.ContainsIndex(2); // false Exceptions Type Condition ArgumentNullException 数组为空 | Improve this Doc View Source Find<T>(T[], Predicate<T>) 返回数组中的第一个匹配元素 Declaration public static T Find<T>(this T[] this, Predicate<T> match) Parameters Type Name Description T[] this Predicate <T> match 用于定义要搜索的元素的条件的谓词 Returns Type Description T Type Parameters Name Description T 数组的元素类型 Examples var rs = new[] {\"a\", \"aa\", \"bb\", \"aaa\"}.Find(s => s.Length == 2); // \"aa\" Exceptions Type Condition ArgumentNullException match is null. | Improve this Doc View Source FindAll<T>(T[], Predicate<T>) 返回数组中所有匹配的元素 Declaration public static T[] FindAll<T>(this T[] this, Predicate<T> match) Parameters Type Name Description T[] this Predicate <T> match 用于定义要搜索的元素的条件的谓词 Returns Type Description T[] Type Parameters Name Description T 数组的元素类型 Examples var rs = new[] {\"a\", \"aa\", \"bb\", \"aaa\"}.FindAll(s => s.Length == 2); // [\"aa\",\"bb\"] Exceptions Type Condition ArgumentNullException match is null. | Improve this Doc View Source FindIndex<T>(T[], Int32, Int32, Predicate<T>) 返回数组中的第一个匹配元素的索引 Declaration public static int FindIndex<T>(this T[] this, int startIndex, int count, Predicate<T> match) Parameters Type Name Description T[] this Int32 startIndex 开始的索引 Int32 count 要搜索的部分中的元素数 Predicate <T> match 用于定义要搜索的元素的条件的谓词 Returns Type Description Int32 Type Parameters Name Description T 数组的元素类型 Examples var rs = new[] {\"a\", \"aa\", \"bb\", \"aaa\"}.FindIndex(1, 2, ss => ss.Length == 2); // 1 Exceptions Type Condition ArgumentNullException this 或 match 为空. ArgumentOutOfRangeException | Improve this Doc View Source FindIndex<T>(T[], Int32, Predicate<T>) 返回数组中的第一个匹配元素的索引 Declaration public static int FindIndex<T>(this T[] this, int startIndex, Predicate<T> match) Parameters Type Name Description T[] this Int32 startIndex 开始的索引 Predicate <T> match 用于定义要搜索的元素的条件的谓词 Returns Type Description Int32 Type Parameters Name Description T 数组的元素类型 Examples var rs = new[] {\"a\", \"aa\", \"bb\", \"aaa\"}.FindIndex(2, ss => ss.Length == 2); // 2 Exceptions Type Condition ArgumentNullException this 或 match 为空. ArgumentOutOfRangeException | Improve this Doc View Source FindIndex<T>(T[], Predicate<T>) 返回数组中的第一个匹配元素的索引 Declaration public static int FindIndex<T>(this T[] this, Predicate<T> match) Parameters Type Name Description T[] this Predicate <T> match 用于定义要搜索的元素的条件的谓词 Returns Type Description Int32 Type Parameters Name Description T 数组的元素类型 Examples var rs = new[] {\"a\", \"aa\", \"bb\", \"aaa\"}.FindIndex(s => s.Length == 2); // 1 Exceptions Type Condition ArgumentNullException this 或 match 为空. | Improve this Doc View Source FindLast<T>(T[], Predicate<T>) 返回数组中的最后一个匹配元素 Declaration public static T FindLast<T>(this T[] this, Predicate<T> match) Parameters Type Name Description T[] this Predicate <T> match 用于定义要搜索的元素的条件的谓词 Returns Type Description T Type Parameters Name Description T 数组的元素类型 Examples var rs = new[] {\"a\", \"aa\", \"bb\", \"aaa\"}.FindLast(s => s.Length == 2); // \"bb\" Exceptions Type Condition ArgumentNullException match is null. | Improve this Doc View Source FindLastIndex<T>(T[], Int32, Int32, Predicate<T>) 返回数组中的最后一个匹配元素的索引 Declaration public static int FindLastIndex<T>(this T[] this, int startIndex, int count, Predicate<T> match) Parameters Type Name Description T[] this Int32 startIndex 开始的索引 Int32 count 要搜索的部分中的元素数 Predicate <T> match 用于定义要搜索的元素的条件的谓词 Returns Type Description Int32 Type Parameters Name Description T 数组的元素类型 Examples var rs = new[] {\"a\", \"aa\", \"b\", \"bb\", \"bbb\", \"c\"}.FindLastIndex(4,3, s1 => s1.StartsWith(\"b\")); // 4 Exceptions Type Condition ArgumentNullException this 或 match 为空. ArgumentOutOfRangeException | Improve this Doc View Source FindLastIndex<T>(T[], Int32, Predicate<T>) 返回数组中的最后一个匹配元素的索引 Declaration public static int FindLastIndex<T>(this T[] this, int startIndex, Predicate<T> match) Parameters Type Name Description T[] this Int32 startIndex 开始的索引 Predicate <T> match 用于定义要搜索的元素的条件的谓词 Returns Type Description Int32 Type Parameters Name Description T 数组的元素类型 Examples var rs = new[] {\"aa\", \"aaa\", \"bb\", \"bb\", \"bbb\", \"ccc\"}.FindLastIndex(1, s1 => s1.StartsWith(\"a\")); // 1 Exceptions Type Condition ArgumentNullException this 或 match 为空. ArgumentOutOfRangeException | Improve this Doc View Source FindLastIndex<T>(T[], Predicate<T>) 返回数组中的最后一个匹配元素的索引 Declaration public static int FindLastIndex<T>(this T[] this, Predicate<T> match) Parameters Type Name Description T[] this Predicate <T> match 用于定义要搜索的元素的条件的谓词 Returns Type Description Int32 Type Parameters Name Description T 数组的元素类型 Examples var rs = new[] {\"aa\", \"aaa\", \"bb\", \"bb\", \"bbb\", \"ccc\"}.FindLastIndex(s1 => s1.StartsWith(\"b\")); // 4 Exceptions Type Condition ArgumentNullException this 或 match 为空 | Improve this Doc View Source Reverse(Array) 反转数组中元素的顺序 Declaration public static void Reverse(this Array this) Parameters Type Name Description Array this Examples var s = new[] {\"a\", \"A\", \"B\", \"b\", \"0\"}; s.Reverse(); // {\"0\", \"b\", \"B\", \"A\", \"a\"} Exceptions Type Condition ArgumentNullException this RankException | Improve this Doc View Source Reverse(Array, Int32, Int32) 反转数组中元素的顺序 Declaration public static void Reverse(this Array this, int index, int length) Parameters Type Name Description Array this Int32 index 要反转的部分的起始索引 Int32 length 要反转的部分中的元素数 Examples var s = new[] {\"a\", \"A\", \"B\", \"b\", \"0\"}; s.Reverse(2, 3); // {\"a\", \"A\", \"0\", \"b\", \"B\"} Exceptions Type Condition ArgumentNullException this ArgumentOutOfRangeException RankException ArgumentException | Improve this Doc View Source Reverse<T>(T[]) 反转数组中元素的顺序 Declaration public static void Reverse<T>(this T[] this) Parameters Type Name Description T[] this Type Parameters Name Description T 数组的元素类型 Examples var s = new[] {\"a\", \"A\", \"B\", \"b\", \"0\"}; s.Reverse(); // {\"0\", \"b\", \"B\", \"A\", \"a\"} Exceptions Type Condition ArgumentNullException this RankException | Improve this Doc View Source Reverse<T>(T[], Int32, Int32) 反转数组中元素的顺序 Declaration public static void Reverse<T>(this T[] this, int index, int length) Parameters Type Name Description T[] this 当前 Array 泛型接口 Int32 index 要反转的部分的起始索引 Int32 length 要反转的部分中的元素数 Type Parameters Name Description T Examples var s = new[] {\"a\", \"A\", \"B\", \"b\", \"0\"}; s.Reverse(2, 3); // {\"a\", \"A\", \"0\", \"b\", \"B\"} Exceptions Type Condition ArgumentNullException this ArgumentOutOfRangeException RankException ArgumentException | Improve this Doc View Source Sort(Array) 排序 Declaration public static void Sort(this Array this) Parameters Type Name Description Array this 当前 Array Examples var s = new[] {\"a\", \"b\", \"c\", \"d\"}; s.Sort(); // {\"a\", \"b\", \"c\", \"d\"} Exceptions Type Condition ArgumentNullException this RankException InvalidOperationException | Improve this Doc View Source Sort(Array, IComparer) 排序 Declaration public static void Sort(this Array this, IComparer comparer) Parameters Type Name Description Array this IComparer comparer 比较元素时使用的 IComparer<T> 泛型接口实现 如果为 null，则使用每个元素的 IComparable<T> 泛型接口实现 Examples var s = new[] {\"aa\", \"AA\", \"A\"}; s.Sort(StringComparer.Ordinal); // {\"A\", \"AA\", \"a\"} Exceptions Type Condition ArgumentNullException this RankException InvalidOperationException ArgumentException | Improve this Doc View Source Sort(Array, Int32, Int32) 排序 Declaration public static void Sort(this Array this, int index, int length) Parameters Type Name Description Array this Int32 index 排序范围的起始索引 Int32 length 排序范围内的元素数 Examples var s = new[] {\"aa\", \"AA\", \"A\"}; s.Sort(StringComparer.CurrentCulture); // {\"A\", \"aa\", \"AA\"} Exceptions Type Condition ArgumentNullException this ArgumentOutOfRangeException index length ArgumentException index length InvalidOperationException | Improve this Doc View Source Sort(Array, Int32, Int32, IComparer) 排序 Declaration public static void Sort(this Array this, int index, int length, IComparer comparer) Parameters Type Name Description Array this Int32 index 排序范围的起始索引 Int32 length 排序范围内的元素数 IComparer comparer 比较元素时使用的 IComparer<T> 泛型接口实现 如果为 null，则使用每个元素的 IComparable<T> 泛型接口实现 Examples var s = new[] {\"BB\", \"aa\", \"CCC\", \"ccc\", \"00\"}; s.Sort(2, 3, StringComparer.CurrentCulture); // {\"BB\", \"aa\", \"00\", \"ccc\", \"CCC\"} Exceptions Type Condition ArgumentNullException this RankException this ArgumentOutOfRangeException index length ArgumentException index length InvalidOperationException | Improve this Doc View Source Sort<T>(T[]) 排序 Declaration public static void Sort<T>(this T[] this) Parameters Type Name Description T[] this Type Parameters Name Description T 数组的元素类型 Examples var s = new[] {\"a\", \"b\", \"c\", \"d\"}; s.Sort(); // {\"a\", \"b\", \"c\", \"d\"} Exceptions Type Condition ArgumentNullException this RankException InvalidOperationException | Improve this Doc View Source Sort<T>(T[], IComparer) 排序 Declaration public static void Sort<T>(this T[] this, IComparer comparer) Parameters Type Name Description T[] this IComparer comparer 比较元素时使用的 IComparer<T> 泛型接口实现 如果为 null，则使用每个元素的 IComparable<T> 泛型接口实现 Type Parameters Name Description T 数组的元素类型 Examples var s = new[] {\"aa\", \"AA\", \"A\"}; s.Sort(StringComparer.Ordinal); // {\"A\", \"AA\", \"a\"} Exceptions Type Condition ArgumentNullException this RankException InvalidOperationException ArgumentException | Improve this Doc View Source Sort<T>(T[], Int32, Int32) 排序 Declaration public static void Sort<T>(this T[] this, int index, int length) Parameters Type Name Description T[] this Int32 index 排序范围的起始索引 Int32 length 排序范围内的元素数 Type Parameters Name Description T 数组的元素类型 Examples var s = new[] {\"aa\", \"AA\", \"A\"}; s.Sort(StringComparer.CurrentCulture); // {\"A\", \"aa\", \"AA\"} Exceptions Type Condition ArgumentNullException this ArgumentOutOfRangeException index length ArgumentException index length InvalidOperationException | Improve this Doc View Source Sort<T>(T[], Int32, Int32, IComparer) 排序 Declaration public static void Sort<T>(this T[] this, int index, int length, IComparer comparer) Parameters Type Name Description T[] this Int32 index 排序范围的起始索引 Int32 length 排序范围内的元素数 IComparer comparer 比较元素时使用的 IComparer<T> 泛型接口实现；如果为 null，则使用每个元素的 IComparable<T> 泛型接口实现 Type Parameters Name Description T 数组的元素类型 Examples var s = new[] {\"BB\", \"aa\", \"CCC\", \"ccc\", \"00\"}; s.Sort(2, 3, StringComparer.CurrentCulture); // {\"BB\", \"aa\", \"00\", \"ccc\", \"CCC\"} Exceptions Type Condition ArgumentNullException this RankException this ArgumentOutOfRangeException index length ArgumentException index length InvalidOperationException"
  },
  "api/Lett.Extensions.TypeExtensions.html": {
    "href": "api/Lett.Extensions.TypeExtensions.html",
    "title": "Class TypeExtensions | Lett.Extensions",
    "keywords": "Class TypeExtensions type 扩展方法 Inheritance Object TypeExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class TypeExtensions Methods | Improve this Doc View Source HasProperty(Type, String) 是否包含 PropertyInfo (可访问的 PropertyInfo ) Declaration public static bool HasProperty(this Type this, string propertyName) Parameters Type Name Description Type this String propertyName 属性名，忽略大小写 Returns Type Description Boolean Examples public class Class1 { public string PropertyA { get; set; } private string PropertyB { get; set; } } Exceptions Type Condition ArgumentNullException ArgumentException"
  },
  "api/Lett.Extensions.StringExtensions.html": {
    "href": "api/Lett.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | Lett.Extensions",
    "keywords": "Class StringExtensions string 扩展方法 Inheritance Object StringExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class StringExtensions Methods | Improve this Doc View Source AppendPrefixIfNotExist(String, String, StringComparison) 如果字符串不包含指定前缀，则添加前缀 默认不区分大小写 Declaration public static string AppendPrefixIfNotExist(this string this, string prefix, StringComparison stringComparison = StringComparison.OrdinalIgnoreCase) Parameters Type Name Description String this String prefix 前缀 StringComparison stringComparison 字符串比较规则 默认使用 OrdinalIgnoreCase Returns Type Description String Examples var rs1 = \"aa\".AppendPrefixIfNotExist(\"t_\"); // t_aa var rs2 = \"T_bb\".AppendPrefixIfNotExist(\"t_\"); // T_bb var rs3 = \"T_cc\".AppendPrefixIfNotExist(\"t_\", StringComparison.Ordinal); // t_T_cc \"T_cc\".AppendPrefixIfNotExist(null); // throw ArgumentNullException prefix is null default(string).AppendPrefixIfNotExist(\"d\"); // throw ArgumentNullException @this is null Exceptions Type Condition ArgumentNullException this 不允许为空 ArgumentNullException prefix 不允许为空 | Improve this Doc View Source AppendSuffixIfNotExist(String, String, StringComparison) 如果字符串不包含指定后缀，则添加后缀 默认不区分大小写 Declaration public static string AppendSuffixIfNotExist(this string this, string suffix, StringComparison stringComparison = StringComparison.OrdinalIgnoreCase) Parameters Type Name Description String this String suffix 后缀 StringComparison stringComparison 字符串比较规则 默认使用 OrdinalIgnoreCase Returns Type Description String Examples var rs1 = \"aa\".AppendSuffixIfNotExist(\"_t\"); // aa_t var rs2 = \"bb_T\".AppendSuffixIfNotExist(\"_t\"); // bb_T var rs3 = \"cc_T\".AppendSuffixIfNotExist(\"_t\", StringComparison.Ordinal); // cc_T_t \"cc_T\".AppendSuffixIfNotExist(null); // throw ArgumentNullException suffix is null default(string).AppendSuffixIfNotExist(\"_t\"); // throw ArgumentNullException @this is null Exceptions Type Condition ArgumentNullException this 不允许为空 ArgumentNullException suffix 不允许为空 | Improve this Doc View Source AsDirectoryInfo(String) 转换为 DirectoryInfo (当前字符串作为 path) Declaration public static DirectoryInfo AsDirectoryInfo(this string this) Parameters Type Name Description String this Returns Type Description DirectoryInfo Exceptions Type Condition ArgumentNullException | Improve this Doc View Source AsFileStream(String, FileMode, FileAccess, FileShare, Int32) 转换为 FileStream (当前字符串作为 path) Declaration public static FileStream AsFileStream(this string this, FileMode fileMode, FileAccess fileAccess, FileShare fileShare, int bufferSize = 8192) Parameters Type Name Description String this FileMode fileMode 文件打开方式 FileAccess fileAccess FileShare fileShare Int32 bufferSize 缓冲区大小 Returns Type Description FileStream Exceptions Type Condition ArgumentNullException @this is null. ArgumentException @this is an empty string (\"\"), contains only white space, or contains one or more invalid characters. -or- this refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment. NotSupportedException @this refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment. FileNotFoundException The file cannot be found, such as when fileMode is FileMode.Truncate or FileMode.Open, and the file specified by this does not exist. The file must already exist in these modes. IOException An I/O error, such as specifying FileMode.CreateNew when the file specified by this already exists, occurred. -or- The system is running Windows 98 or Windows 98 Second Edition and fileShare is set to FileShare.Delete. -or- The stream has been closed. SecurityException The caller does not have the required permission. DirectoryNotFoundException The specified path is invalid, such as being on an unmapped drive. UnauthorizedAccessException The fileAccess requested is not permitted by the operating system for the specified this , such as when fileAccess is Write or ReadWrite and the file or directory is set for read-only access. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. | Improve this Doc View Source Base64Decode(String) 进行 BASE6 4解码 使用 UTF8 Declaration public static string Base64Decode(this string this) Parameters Type Name Description String this Returns Type Description String 转换失败返回 null Examples var base64 = \"QUJDRA==\"; base64.Base64Decode(); // \"ABCD\" | Improve this Doc View Source Base64Encode(String) 进行 BASE64 编码 使用 UTF8 Declaration public static string Base64Encode(this string this) Parameters Type Name Description String this Returns Type Description String 转换失败返回 null Examples var str1 = \"ABCD\"; str1.Base64Encode(); // \"QUJDRA==\" | Improve this Doc View Source ContainsAll(String, IEnumerable<String>) 是否全部包含 使用 CurrentCultureIgnoreCase 比较 Declaration public static bool ContainsAll(this string this, IEnumerable<string> values) Parameters Type Name Description String this IEnumerable < String > values 需要进行判断的字符串集合 Returns Type Description Boolean Examples var a = \"aaabbbccc\"; var b = new[] {\"aaa\", \"bbb\"}; a.ContainsAll(b); // true Exceptions Type Condition ArgumentNullException values is null ArgumentException | Improve this Doc View Source ContainsAll(String, IEnumerable<String>, StringComparison) 是否全部包含 Declaration public static bool ContainsAll(this string this, IEnumerable<string> values, StringComparison comparisonType) Parameters Type Name Description String this IEnumerable < String > values 需要进行判断的字符串集合 StringComparison comparisonType 字符串比较规则 Returns Type Description Boolean Examples var a = \"aaabbbccc\"; var b = new[] {\"aaa\", \"bbb\"}; a.ContainsAll(b); // true Exceptions Type Condition ArgumentNullException values is null ArgumentException | Improve this Doc View Source ContainsAny(String, IEnumerable<String>) 是否包含任意一个 使用 CurrentCultureIgnoreCase 判断 Declaration public static bool ContainsAny(this string this, IEnumerable<string> values) Parameters Type Name Description String this IEnumerable < String > values 需要进行判断的字符串集合 Returns Type Description Boolean Examples var a = \"aaabbbccc\"; var b = new[] {\"a\", \"dd\", \"eee\"}; a.ContainsAny(b); // true | Improve this Doc View Source ContainsAny(String, IEnumerable<String>, StringComparison) 是否包含任意一个 Declaration public static bool ContainsAny(this string this, IEnumerable<string> values, StringComparison comparisonType) Parameters Type Name Description String this IEnumerable < String > values 需要进行判断的字符串集合 StringComparison comparisonType 字符串比较规则 Returns Type Description Boolean Examples var a = \"aaabbbccc\"; var b = new[] {\"a\", \"dd\", \"eee\"}; a.ContainsAny(b); // true | Improve this Doc View Source Format(String, Object[]) 格式化 Declaration public static string Format(this string this, params object[] args) Parameters Type Name Description String this Object [] args Returns Type Description String Examples var tmp = \"{0}-{1}\"; tmp.Format(new[]{\"aaa\",\"bbb\"}); // \"aaa-bbb\" Exceptions Type Condition ArgumentNullException FormatException | Improve this Doc View Source IgnoreCaseEquals(String, String) 忽略大小写比较 使用 CurrentCultureIgnoreCase Declaration public static bool IgnoreCaseEquals(this string this, string value) Parameters Type Name Description String this String value 需要进行比较的字符串 Returns Type Description Boolean Examples \"aaa\".IgnoreCaseEquals(\"AaA\"); // true | Improve this Doc View Source IsEmail(String) 是否Email Declaration public static bool IsEmail(this string this) Parameters Type Name Description String this Returns Type Description Boolean Examples \"abc@qqq.com\".IsEmail(); // true \"abc@qqq#.com\".IsEmail(); // false Exceptions Type Condition ArgumentNullException 字符串为空 ArgumentNullException ArgumentException RegexMatchTimeoutException | Improve this Doc View Source IsEmpty(String) 是否空字符串 Declaration public static bool IsEmpty(this string this) Parameters Type Name Description String this Returns Type Description Boolean Examples var a = \"\"; var b = \" \"; a.IsEmpty(); // true b.IsEmpty(); // false | Improve this Doc View Source IsLike(String, String) 使用通配符比较字符串是否相似 通配符 * 特殊字符 用 \\ 转义 正则匹配时，使用 Singleline Declaration public static bool IsLike(this string this, string pattern) Parameters Type Name Description String this String pattern 通配符表达式，为 null 时返回 false Returns Type Description Boolean this 为 null 时 返回 false pattern 为 null 时 返回 false Examples var test1 = \"abcdefg\\r\\nabcdefghijk\"; test1.IsLike(\"abc*\"); // true test1.IsLike(\"a*\"); // true test1.IsLike(\"*ijk\"); // true test1.IsLike(\"abc*fg*\"); // true Exceptions Type Condition ArgumentOutOfRangeException ArgumentNullException FormatException ArgumentException RegexMatchTimeoutException | Improve this Doc View Source IsLower(String) 是否全部小写 Declaration public static bool IsLower(this string this) Parameters Type Name Description String this Returns Type Description Boolean Examples \"abcddd\".IsLower(); // true; \"abDD\".IsLower(); // false | Improve this Doc View Source IsNullOrEmpty(String) 是否 null 或 string.Empty Declaration public static bool IsNullOrEmpty(this string this) Parameters Type Name Description String this Returns Type Description Boolean Examples \" \".IsNullOrEmpty(); // false \"\".IsNullOrEmpty(); // true | Improve this Doc View Source IsNullOrWhiteSpace(String) 是否null或空白 Declaration public static bool IsNullOrWhiteSpace(this string this) Parameters Type Name Description String this Returns Type Description Boolean Examples \" \".IsNullOrWhiteSpace(); // true \"\\r\".IsNullOrWhiteSpace(); // true | Improve this Doc View Source IsUpper(String) 是否全部大写 Declaration public static bool IsUpper(this string this) Parameters Type Name Description String this Returns Type Description Boolean Examples \"ABC\".IsUpper(); // true \"ABd\".IsUpper(); // false | Improve this Doc View Source IsUrl(String) 是否URL Declaration public static bool IsUrl(this string this) Parameters Type Name Description String this Returns Type Description Boolean Examples \"http://sdf.com\".IsUrl(); // true \"http://sdf.c.dddd.cccc.saaa.com\".IsUrl(); // true \"www.sdf.com\".IsUrl(); // false | Improve this Doc View Source IsWhiteSpace(String) 是否空白字符串 Declaration public static bool IsWhiteSpace(this string this) Parameters Type Name Description String this Returns Type Description Boolean Examples var a = \"\"; var b = \" \"; var c = \"\\r\"; var d = \"\\t\"; var e = \"\\n\"; var f = \"\\r \\t\"; a.IsWhiteSpace(); // true b.IsWhiteSpace(); // true c.IsWhiteSpace(); // true d.IsWhiteSpace(); // true e.IsWhiteSpace(); // true f.IsWhiteSpace(); // true | Improve this Doc View Source Left(String, Int32) 从左侧返回指定长度的字符串 Declaration public static string Left(this string this, int length) Parameters Type Name Description String this Int32 length 指定长度 不能小于 0 Returns Type Description String Examples \"1234567890\".Left(3); // \"123\" Exceptions Type Condition ArgumentOutOfRangeException length 不能小于 0 | Improve this Doc View Source RegexIsMatch(String, String) 正则表达式 - 是否匹配 使用 None Declaration public static bool RegexIsMatch(this string this, string pattern) Parameters Type Name Description String this String pattern 正则表达式 Returns Type Description Boolean Examples var source = \"abcdefg\\r\\nabcdefghijk\"; source.RegexIsMatch(@\"^abc.*\\r$\", RegexOptions.Multiline); // true Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException RegexMatchTimeoutException | Improve this Doc View Source RegexIsMatch(String, String, RegexOptions) 正则表达式 - 是否匹配 Declaration public static bool RegexIsMatch(this string this, string pattern, RegexOptions regexOption) Parameters Type Name Description String this String pattern 正则表达式 RegexOptions regexOption 正则表达式选项 Returns Type Description Boolean Examples var source = \"abcdefg\\r\\nabcdefghijk\"; source.RegexIsMatch(@\"^abc.*\\r$\", RegexOptions.Multiline); // true Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException RegexMatchTimeoutException | Improve this Doc View Source RegexMatch(String, String) 正则表达式 - 单个匹配对象 使用 None Declaration public static Match RegexMatch(this string this, string pattern) Parameters Type Name Description String this String pattern 正则表达式 Returns Type Description Match 单个匹配对象 Examples var str = \"aaaabaaaabaaaa\"; var match = str.RegexMatch(\"b\"); // match.Success == true; Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException RegexMatchTimeoutException | Improve this Doc View Source RegexMatch(String, String, RegexOptions) 正则表达式 - 单个匹配对象 Declaration public static Match RegexMatch(this string this, string pattern, RegexOptions regexOption) Parameters Type Name Description String this String pattern 正则表达式 RegexOptions regexOption 正则表达式选项 Returns Type Description Match 单个匹配对象 Examples var str = \"aaaabaaaabaaaa\"; var match = str.RegexMatch(\"b\"); // match.Success == true; Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException RegexMatchTimeoutException | Improve this Doc View Source RegexMatches(String, String) 正则表达式 - 所有匹配对象 使用 None Declaration public static MatchCollection RegexMatches(this string this, string pattern) Parameters Type Name Description String this String pattern 正则表达式 Returns Type Description MatchCollection 所有匹配对象 Examples var str = \"aaaabaaaabaaaa\"; var matches = str.RegexMatches(@\"aaaab\"); // matches.Count == 2 Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException | Improve this Doc View Source RegexMatches(String, String, RegexOptions) 正则表达式 - 所有匹配对象 Declaration public static MatchCollection RegexMatches(this string this, string pattern, RegexOptions regexOption) Parameters Type Name Description String this String pattern 正则表达式 RegexOptions regexOption 正则表达式选项 Returns Type Description MatchCollection 所有匹配对象 Examples var str = \"aaaabaaaabaaaa\"; var matches = str.RegexMatches(@\"aaaab\"); // matches.Count == 2 Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException | Improve this Doc View Source RegexReplace(String, String, String) 正则表达式 - 替换字符串 使用 None Declaration public static string RegexReplace(this string this, string pattern, string replacement) Parameters Type Name Description String this String pattern 正则表达式 String replacement 替换字符串 Returns Type Description String | Improve this Doc View Source RegexReplace(String, String, String, RegexOptions) 正则表达式 - 替换字符串 Declaration public static string RegexReplace(this string this, string pattern, string replacement, RegexOptions regexOption) Parameters Type Name Description String this String pattern 正则表达式 String replacement 替换字符串 RegexOptions regexOption 正则表达式选项 Returns Type Description String | Improve this Doc View Source RegexReplace(String, String, MatchEvaluator) 正则表达式 - 替换字符串 Declaration public static string RegexReplace(this string this, string pattern, MatchEvaluator evaluator) Parameters Type Name Description String this 源字符串 String pattern 正则表达式 MatchEvaluator evaluator 委托表示的方法返回的字符串 Returns Type Description String Examples var rs2 = test1.RegexReplace(@\"\\.\", match => match.Value + \"@\"); // \"aaaa.@bbbb.@cccc\" Exceptions Type Condition ArgumentException ArgumentNullException RegexMatchTimeoutException | Improve this Doc View Source RegexSplit(String, String) 正则表达式 - 拆分字符串 使用 None Declaration public static string[] RegexSplit(this string this, string pattern) Parameters Type Name Description String this String pattern 正则表达式 Returns Type Description String [] Examples var str = \"aaaa.bbbb.cccc\"; var rs = str.RegexSplit(@\"\\.\"); // rs.Count == 3 Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException RegexMatchTimeoutException | Improve this Doc View Source RegexSplit(String, String, RegexOptions) 正则表达式 - 拆分字符串 Declaration public static string[] RegexSplit(this string this, string pattern, RegexOptions regexOption) Parameters Type Name Description String this String pattern 正则表达式 RegexOptions regexOption 正则表达式选项 Returns Type Description String [] Examples var str = \"aaaa.bbbb.cccc\"; var rs = str.RegexSplit(@\"\\.\"); // rs.Count == 3 Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException RegexMatchTimeoutException | Improve this Doc View Source RemovePrefix(String, String, StringComparison) 移除前缀，若前缀不符则返回原字符串 默认不区分大小写 Declaration public static string RemovePrefix(this string this, string prefix, StringComparison stringComparison = StringComparison.OrdinalIgnoreCase) Parameters Type Name Description String this String prefix 前缀 StringComparison stringComparison Returns Type Description String Examples \"t_table\".RemovePrefix(\"T_\"); // \"table\" \"t_table\".RemovePrefix(\"T_\", StringComparison.Ordinal); // \"t_table\" \"t_table\".RemovePrefix(\"aaaaaaaaaaa\", StringComparison.Ordinal); // \"t_table\" \"t_table\".RemovePrefix(\"T_TABLE\"); // \"\" \"t_table\".RemovePrefix(null); // throw ArgumentNullException default(string).RemovePrefix(\"ddd\"); // throw ArgumentNullException Exceptions Type Condition ArgumentNullException this 不允许为空 ArgumentNullException prefix 不允许为空 | Improve this Doc View Source RemoveSuffix(String, String, StringComparison) 移除后缀，若后缀不符则返回原字符串 默认不区分大小写 Declaration public static string RemoveSuffix(this string this, string suffix, StringComparison stringComparison = StringComparison.OrdinalIgnoreCase) Parameters Type Name Description String this String suffix 后缀 StringComparison stringComparison Returns Type Description String Examples \"logo.jpg\".RemoveSuffix(\".JPg\"); // \"logo\" \"logo.jpg\".RemoveSuffix(\".JPG\", StringComparison.Ordinal); // \"logo.jpg\" \"logo.jpg\".RemoveSuffix(\"aaaaaaaa\"); // \"logo.jpg\" \"logo.jpg\".RemoveSuffix(\"LoGO.jpG\"); // \"\" \"logo.jpg\".RemoveSuffix(null); // throw ArgumentNullException default(string).RemoveSuffix(\"dddd\"); // throw ArgumentNullException Exceptions Type Condition ArgumentNullException this 不允许为空 ArgumentNullException suffix 不允许为空 | Improve this Doc View Source Right(String, Int32) 从右侧返回指定长度的字符串 Declaration public static string Right(this string this, int length) Parameters Type Name Description String this Int32 length 指定长度 不能小于 0 Returns Type Description String Examples \"1234567890\".Right(3); // \"890\" Exceptions Type Condition ArgumentOutOfRangeException length 不能小于 0 | Improve this Doc View Source ToBytes(String) 转换为 byte 数组 编码格式 默认为 UTF8 Declaration public static byte[] ToBytes(this string this) Parameters Type Name Description String this Returns Type Description Byte [] Examples var source = \"abcd\"; var rs = source.ToBytes(Encoding.Unicode); var rs2 = source.ToBytes(); // use Encoding.UTF8 Exceptions Type Condition ArgumentNullException this is null EncoderFallbackException | Improve this Doc View Source ToBytes(String, Encoding) 转换为 byte 数组 Declaration public static byte[] ToBytes(this string this, Encoding encoding) Parameters Type Name Description String this Encoding encoding 编码格式 Returns Type Description Byte [] Examples var source = \"abcd\"; var rs = source.ToBytes(Encoding.Unicode); var rs2 = source.ToBytes(); // use Encoding.UTF8 Exceptions Type Condition ArgumentNullException encoding is null ArgumentNullException this is null EncoderFallbackException | Improve this Doc View Source ToXmlDocument(String) 转换为 XmlDocument Declaration public static XmlDocument ToXmlDocument(this string this) Parameters Type Name Description String this Returns Type Description XmlDocument Examples var source = \"<item><name>wrench</name></item>\"; var rs = source.ToXmlDocument(); Exceptions Type Condition XmlException"
  },
  "api/Lett.Extensions.StreamExtensions.html": {
    "href": "api/Lett.Extensions.StreamExtensions.html",
    "title": "Class StreamExtensions | Lett.Extensions",
    "keywords": "Class StreamExtensions Stream 扩展方法 Inheritance Object StreamExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class StreamExtensions Methods | Improve this Doc View Source Deserialize<T>(Stream) 反序列化 formatter: BinaryFormatter 类型转换失败，返回 default(T) Declaration public static T Deserialize<T>(this Stream this) Parameters Type Name Description Stream this Returns Type Description T Type Parameters Name Description T Examples var fs = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read); var rs = fs.Deserialize<MyClass>(); | Improve this Doc View Source Deserialize<T>(Stream, IFormatter) 反序列化 类型转换失败，返回 default(T) Declaration public static T Deserialize<T>(this Stream this, IFormatter formatter) Parameters Type Name Description Stream this IFormatter formatter 格式化器 Returns Type Description T Type Parameters Name Description T 类型 | Improve this Doc View Source SaveAsFile(Stream, String) 保存为文件 FileMode. Create | bufferSize: 81920 Declaration public static void SaveAsFile(this Stream this, string filePath) Parameters Type Name Description Stream this String filePath Examples var ms = new MemoryStream(myBytes); ms.SaveToFile(filePath); | Improve this Doc View Source SaveAsFile(Stream, String, FileMode) 保存为文件 bufferSize: 81920 Declaration public static void SaveAsFile(this Stream this, string filePath, FileMode fileMode) Parameters Type Name Description Stream this String filePath 文件路径 FileMode fileMode 文件打开方式 Examples var ms = new MemoryStream(myBytes); ms.SaveToFile(filePath, FileMode.Append); Exceptions Type Condition ArgumentNullException this is null ArgumentNullException filePath is null NotSupportedException filePath is not supported | Improve this Doc View Source SaveAsFile(Stream, String, FileMode, Int32) 保存为文件 Declaration public static void SaveAsFile(this Stream this, string filePath, FileMode fileMode, int bufferSize) Parameters Type Name Description Stream this String filePath 文件路径 FileMode fileMode 文件打开方式 Int32 bufferSize 缓冲区大小 Examples var ms = new MemoryStream(myBytes); ms.SaveToFile(filePath, FileMode.Append, 1024); Exceptions Type Condition ArgumentNullException this is null ArgumentNullException filePath is null ArgumentOutOfRangeException bufferSize must greater than zero NotSupportedException filePath is not supported"
  },
  "api/Lett.Extensions.ObjectExtensions.html": {
    "href": "api/Lett.Extensions.ObjectExtensions.html",
    "title": "Class ObjectExtensions | Lett.Extensions",
    "keywords": "Class ObjectExtensions Object 扩展方法 Inheritance Object ObjectExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class ObjectExtensions Methods | Improve this Doc View Source As<T>(Object) 对象强转换 Declaration public static T As<T>(this object this) Parameters Type Name Description Object this Returns Type Description T 转换失败返回 default( T ) Type Parameters Name Description T 目标类型 Examples var s = new ClassA(); var rs = s.As<BaseClass>(); // if failed, rs == default(BaseClass) | Improve this Doc View Source As<T>(Object, T) 对象强转换 Declaration public static T As<T>(this object this, T defaultValue) Parameters Type Name Description Object this T defaultValue Returns Type Description T 转换失败返回 defaultValue Type Parameters Name Description T 目标类型 Examples var s = new ClassA(); s.As<BaseClass>(); | Improve this Doc View Source As<T>(Object, Func<T>) 对象强转换 Declaration public static T As<T>(this object this, Func<T> func) Parameters Type Name Description Object this Func <T> func Returns Type Description T 转换失败返回 func Type Parameters Name Description T 目标类型 Examples var s = new ClassA(); s.As<BaseClass>(() => new BaseClass()); | Improve this Doc View Source DeepClone<T>(T) 深复制 this 为空时， 返回 default<T> Declaration public static T DeepClone<T>(this T this) Parameters Type Name Description T this Returns Type Description T Type Parameters Name Description T 泛型约束 需要支持序列化 Serializable Examples [Serializable] private class MyClass { public string Name { get; set; } } var obj = new MyClass{Name = \"aa\"}; var rs = obj.DeepClone(); // obj.Name == rs.Name // obj != rs Exceptions Type Condition ArgumentException 目标类型 T 需要支持序列化 | Improve this Doc View Source GetTypeName(Object) 获取当前对象类型名称 Declaration public static string GetTypeName(this object this) Parameters Type Name Description Object this Returns Type Description String this 为空 返回 Empty Examples var obj1 = new MyClass(); obj1.GetTypeName(); // \"MyClass\" var obj2 = \"\"; obj2.GetTypeName(); // \"String\" object obj4 = null; obj4.GetTypeName(); // string.Empty Exceptions Type Condition NullReferenceException | Improve this Doc View Source In<T>(T, IEnumerable<T>) 当前对象是否存在于 items 集合内 Declaration public static bool In<T>(this T this, IEnumerable<T> items) Parameters Type Name Description T this IEnumerable <T> items 进行比较的集合 Returns Type Description Boolean items 为空 返回 false Type Parameters Name Description T 对象类型 Examples var dtItems = new[] { new DateTime(2018, 1, 1), new DateTime(2019, 1, 1, 9, 10, 1), DateTime.Today }; var dt2 = DateTime.Today; dt2.In(dtItems); // true var stringItems = new[] {\"a\", \"b\", null}; var s = \"a\"; string s2 = null; s.In(stringItems); // true s2.In(stringItems); // true string[] stringItems2 = null; var s3 = \"a\"; s3.In(stringItems2); // false, stringItems2 is null always return false Exceptions Type Condition ArgumentNullException | Improve this Doc View Source In<T>(T, IEnumerable<T>, IEqualityComparer<T>) 当前对象是否存在于 items 集合内 Declaration public static bool In<T>(this T this, IEnumerable<T> items, IEqualityComparer<T> comparer) Parameters Type Name Description T this IEnumerable <T> items 进行比较的集合 IEqualityComparer <T> comparer 比较器 Returns Type Description Boolean items 为空 返回 false Type Parameters Name Description T 对象类型 Examples public class MyComparer : IEqualityComparer<DateTime> { public bool Equals(DateTime x, DateTime y) { return x.Year.Equals(y.Year); } public int GetHashCode(DateTime obj) { return obj.GetHashCode(); } } var dtItems = new[] { new DateTime(2018, 1, 1), new DateTime(2019, 1, 1, 9, 10, 1), DateTime.Today }; var dt = new DateTime(2019, 5, 25, 1, 1, 1); dt.In(dtItems, new MyComparer()); // true var strItems = new[] {\"a\", \"A\", \"b\"}; var s = \"B\"; s.In(strItems, StringComparer.CurrentCultureIgnoreCase); // true s.In(strItems, StringComparer.CurrentCulture); // false | Improve this Doc View Source InParams<T>(T, T[]) 当前对象是否存在于 items 数组内 Declaration public static bool InParams<T>(this T this, params T[] items) Parameters Type Name Description T this T[] items params T [] Returns Type Description Boolean items 为空 返回 false Type Parameters Name Description T Examples \"a\".InParams(\"A\", \"a\"); // true string s = null; s.InParams(\"a\"); // false | Improve this Doc View Source InParams<T>(T, IEqualityComparer<T>, T[]) 当前对象是否存在于 items 数组内 Declaration public static bool InParams<T>(this T this, IEqualityComparer<T> comparer, params T[] items) Parameters Type Name Description T this IEqualityComparer <T> comparer 比较器 T[] items params T [] Returns Type Description Boolean items 为空 返回 false Type Parameters Name Description T Examples \"a\".InParams(StringComparer.CurrentCultureIgnoreCase, \"A\", \"B\"); // true \"a\".InParams(StringComparer.Ordinal, \"A\", \"B\"); // false \"a\".InParams(StringComparer.Ordinal, null); // false | Improve this Doc View Source IsArray(Object) 当前对象类型是否 Array Declaration public static bool IsArray(this object this) Parameters Type Name Description Object this Returns Type Description Boolean this 为 null ，返回 false Examples var obj1 = new[] {\"1\", \"2\"}; obj1.IsArray(); // true var obj2 = new List<string> {\"1\", \"2\"}; obj2.IsArray(); // false object obj3 = null; obj3.IsArray(); // false var obj4 = new MyClass(); obj4.IsArray(); // false Exceptions Type Condition NullReferenceException | Improve this Doc View Source IsAssignableFrom(Object, Type) 指定类型的实例是否能分配给当前类型实例 Declaration public static bool IsAssignableFrom(this object this, Type targetType) Parameters Type Name Description Object this Type targetType 指定类型 Returns Type Description Boolean | Improve this Doc View Source IsClass(Object) 当前对象类型是否 Class Declaration public static bool IsClass(this object this) Parameters Type Name Description Object this Returns Type Description Boolean this 为 null ，返回 false Examples var obj1 = new MyClass(); obj1.IsClass(); // true var obj2 = 12; obj2.IsClass(); // false object obj3 = null; obj3.IsClass(); // false Exceptions Type Condition NullReferenceException | Improve this Doc View Source IsDBNull(Object) 是否DBNull Declaration public static bool IsDBNull(this object this) Parameters Type Name Description Object this Returns Type Description Boolean Examples var value = DBNull.Value; value.IsDBNull(); // true | Improve this Doc View Source IsEnum(Object) 当前对象类型是否枚举 Declaration public static bool IsEnum(this object this) Parameters Type Name Description Object this Returns Type Description Boolean this 为 null ，返回 false Examples private enum MyEnum { None } var obj1 = MyEnum.None; obj1.IsEnum(); // true Exceptions Type Condition NullReferenceException | Improve this Doc View Source IsNull(Object) 是否 null Declaration public static bool IsNull(this object this) Parameters Type Name Description Object this Returns Type Description Boolean | Improve this Doc View Source IsNullOrDbNull(Object) 是否 Null 或 DBNull Declaration public static bool IsNullOrDbNull(this object this) Parameters Type Name Description Object this Returns Type Description Boolean Examples var v = DBNull.Value; v.IsNullOrDbNull(); // true var v2 = default(string); // null v2.IsNullOrDbNull(); // true | Improve this Doc View Source IsSerializable(Object) 当前对象类型是否可序列化的 Declaration public static bool IsSerializable(this object this) Parameters Type Name Description Object this Returns Type Description Boolean Examples var obj1 = new[] {\"1\", \"2\"}; obj1.IsSerializable(); // true object obj3 = null; obj3.IsSerializable(); // false private class MyClass { public string Name { get; set; } } var obj4 = new MyClass(); obj4.IsSerializable(); // false [Serializable] private class MySerializableClass { public string Name { get; set; } } var obj5 = new MySerializableClass(); obj5.IsSerializable(); // true Exceptions Type Condition NullReferenceException | Improve this Doc View Source IsValueType(Object) 当前对象类型是否值类型 Declaration public static bool IsValueType(this object this) Parameters Type Name Description Object this Returns Type Description Boolean this 为 null ，返回 false Examples var obj1 = 12; obj1.IsValueType(); // true var obj2 = \"\"; obj2.IsValueType(); // false var obj4 = new MyStruct(); obj4.IsValueType(); // true var obj5 = new DateTime(); obj5.IsValueType(); // true Exceptions Type Condition NullReferenceException | Improve this Doc View Source NotIn<T>(T, IEnumerable<T>) 当前对象是否不存在于 items 集合内 Declaration public static bool NotIn<T>(this T this, IEnumerable<T> items) Parameters Type Name Description T this IEnumerable <T> items 进行比较的集合 Returns Type Description Boolean items 为空 返回 false Type Parameters Name Description T 对象类型 Examples var dtItems = new[] { new DateTime(2018, 1, 1), new DateTime(2019, 1, 1, 9, 10, 1), DateTime.Today }; var dt2 = DateTime.Today; dt2.NotIn(dtItems); // false var stringItems = new[] {\"a\", \"b\", null}; var s = \"a\"; string s2 = null; s.NotIn(stringItems); // false s2.NotIn(stringItems); // false string[] stringItems2 = null; var s3 = \"a\"; s3.NotIn(stringItems2); // true Exceptions Type Condition ArgumentNullException | Improve this Doc View Source NotIn<T>(T, IEnumerable<T>, IEqualityComparer<T>) 当前对象是否不存在于 items 集合内 Declaration public static bool NotIn<T>(this T this, IEnumerable<T> items, IEqualityComparer<T> comparer) Parameters Type Name Description T this IEnumerable <T> items 进行比较的集合 IEqualityComparer <T> comparer 比较器 Returns Type Description Boolean items 为空 返回 false Type Parameters Name Description T 对象类型 Examples var dtItems = new[] { new DateTime(2018, 1, 1), new DateTime(2019, 1, 1, 9, 10, 1), DateTime.Today }; var dt = new DateTime(2019, 5, 25, 1, 1, 1); dt.NotIn(dtItems, new MyComparer()); // false | Improve this Doc View Source NotInParams<T>(T, T[]) 当前对象是否不存在于 items 数组内 Declaration public static bool NotInParams<T>(this T this, params T[] items) Parameters Type Name Description T this T[] items params T [] Returns Type Description Boolean items 为空 返回 false Type Parameters Name Description T Examples \"a\".NotInParams(\"A\", \"a\"); // fase string s = null; s.InParams(\"a\"); // false | Improve this Doc View Source NotInParams<T>(T, IEqualityComparer<T>, T[]) 当前对象是否不存在于 items 数组内 Declaration public static bool NotInParams<T>(this T this, IEqualityComparer<T> comparer, params T[] items) Parameters Type Name Description T this IEqualityComparer <T> comparer 比较器 T[] items params T [] Returns Type Description Boolean items 为空 返回 false Type Parameters Name Description T Examples \"a\".NotInParams(StringComparer.CurrentCultureIgnoreCase, \"A\", \"B\"); // false \"a\".NotInParams(StringComparer.Ordinal, \"A\", \"B\"); // true \"a\".NotInParams(StringComparer.Ordinal, null); // true | Improve this Doc View Source Pipe<T>(T, Action<T>) 管道操作 - action Declaration public static T Pipe<T>(this T this, Action<T> action) Parameters Type Name Description T this Action <T> action Returns Type Description T Type Parameters Name Description T Examples var obj1 = new MyClass(); var rs = obj1.Pipe(o => { o.Name += \"pipe1\";}) .Pipe(o => { o.Name += \"_pipe2\";}) .Pipe(o => { o.Name += \"_pipe3\";}) .Pipe(o => { o.Name += \"_pipe4\";}) .Pipe(o => { o.Name += \"_pipe5\";}); // rs.Name == \"pipe1_pipe2_pipe3_pipe4_pipe5\"; Exceptions Type Condition ArgumentNullException this is null | Improve this Doc View Source Pipe<TSource, TResult>(TSource, Func<TSource, TResult>) 管道操作 - func Declaration public static TResult Pipe<TSource, TResult>(this TSource this, Func<TSource, TResult> func) Parameters Type Name Description TSource this Func <TSource, TResult> func Returns Type Description TResult Type Parameters Name Description TSource TResult Examples var obj1 = new MyClass(); var rs2 = obj1.Pipe(o => { o.Name += \"pipe1\";}) .Pipe(o => { o.Name += \"_pipe2\";}) .Pipe(o => { o.Name += \"_pipe3\";}) .Pipe(o => { o.Name += \"_pipe4\";}) .Pipe(o => { o.Name += \"_pipe5\";}) .Pipe(o => o.Name.Replace(\"pipe\", \"\")); // pipe func return: o.Name.Replace(\"pipe\", \"\"); Assert.AreEqual(rs2, \"1_2_3_4_5\"); Exceptions Type Condition ArgumentNullException this is null | Improve this Doc View Source SaveAsFile<T>(T, String) 保存为文件 FileMode. Create | formatter: BinaryFormatter Declaration public static void SaveAsFile<T>(this T this, string filePath) Parameters Type Name Description T this String filePath Type Parameters Name Description T | Improve this Doc View Source SaveAsFile<T>(T, String, FileMode) 保存为文件 formatter: BinaryFormatter Declaration public static void SaveAsFile<T>(this T this, string filePath, FileMode fileMode) Parameters Type Name Description T this String filePath 文件路径 FileMode fileMode 文件打开方式 Type Parameters Name Description T | Improve this Doc View Source SaveAsFile<T>(T, String, FileMode, IFormatter) 保存为文件 Declaration public static void SaveAsFile<T>(this T this, string filePath, FileMode fileMode, IFormatter formatter) Parameters Type Name Description T this String filePath 文件路径 FileMode fileMode 文件打开方式 IFormatter formatter 格式化器 Type Parameters Name Description T 需要 ISerializable Exceptions Type Condition SerializationException this is not marked as serializable | Improve this Doc View Source To<T>(Object) 对象转换 Declaration public static T To<T>(this object this) where T : IConvertible Parameters Type Name Description Object this Returns Type Description T 转换失败则返回 default( T ) Type Parameters Name Description T 泛型约束 IConvertible Examples var intVar = 11; intVar.To<string>(); // \"11\" var dateTimeStr = \"2018-01-01 23:59:59\"; var rs = dateTimeStr.To<DateTime>(); // rs = new DateTime(2018,1, 1, 23, 59, 59) | Improve this Doc View Source To<T>(Object, T) 对象转换 Declaration public static T To<T>(this object this, T defaultValue) where T : IConvertible Parameters Type Name Description Object this T defaultValue Returns Type Description T 失败则返回 defaultValue Type Parameters Name Description T 泛型约束 IConvertible Examples var dateTimeStr = \"2018-01-01 23:59:59xxxxxxxx\"; // will be fail var rs = dateTimeStr.To<DateTime>(new DateTime(2019, 4, 1)); // rs == new DateTime(2019, 4, 1) | Improve this Doc View Source To<T>(Object, Func<T>) 对象转换 Declaration public static T To<T>(this object this, Func<T> func) where T : IConvertible Parameters Type Name Description Object this Func <T> func Returns Type Description T 转换失败则返回 func Type Parameters Name Description T 泛型约束 IConvertible Examples var dateTimeStr = \"2018-01-01 23:59:59xxxxxxxx\"; // will be fail var rs = dateTimeStr.To<DateTime>(() => new DateTime(2019,4,1)); // rs == new DateTime(2019, 4, 1) var dateTimeStr = \"2018-01-01 23:59:59\"; // will be success var rs = dateTimeStr.To<DateTime>(() => new DateTime(2019,4,1)); // rs == new DateTime(2018, 1, 1, 23, 59, 59)"
  },
  "index.html": {
    "href": "index.html",
    "title": "Popular .Net Core / .Net Framework extension methods | Lett.Extensions",
    "keywords": "Popular .Net Core / .Net Framework extension methods Version Notes | View in Github | View in Nuget Build Status Test Code Quality Feeds Downloads Website License Support and Sponsorship Support Platform Tip Lett.Extensions build at .Net Standard 2.0 You can find more information about .Net Standard from [here] Platform Support platform minimum version .NET Standard 2.0 .NET Core 2.0 .NET Framework 4.6.1 Mono 5.4 Xamarin.iOS 10.14 Xamarin.Mac 3.8 Xamarin.Android 8.0 Universal Windows Platform 10.0.16299 Unity 2018.1 Installation Package Manager Nuget cli .Net cli PM> Install-Package Lett.Extensions > nuget install Lett.Extensions > dotnet add package Lett.Extensions Ducuments ArrayExtensions BooleanExtensions ByteExtensions ByteExtensions DataRowExtensions DataTableExtensions More ... Version Notes see also from [here]"
  },
  "version_notes.html": {
    "href": "version_notes.html",
    "title": "Version Notes | Lett.Extensions",
    "keywords": "Version Notes 0.3.5 Features / 新增功能 Guid GetNewGuidIfEmpty(Guid) 当 this 为 Guid.Empty 时，返回新的 Guid IEnumerable Distinct<T, TResult>(this IEnumerable<T>, Func<T, TResult>) 返回序列中的非重复元素 Duplicates<T, TResult>(this IEnumerable<T>, Func<T, TResult>, IEqualityComparer<TResult>) 返回序列中重复的元素 Duplicates<T, TResult>(this IEnumerable<T>, Func<T, TResult>) 返回序列中重复的元素 DataRow HasColumn 列是否存在 SetValue 设置值 DataTable Update 更新 0.3.4 Features / 新增功能 IEnumerable SplitBlock<T>(IEnumerable<T>, Int32) 分割成指定 size 的块 IDictionary AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) 添加或更新 GetOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) 获取值或更新 AddOrUpdateRange<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>) 批量添加或更新 AddRange<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>) 批量添加 AddRangeParams<TKey, TValue>(IDictionary<TKey, TValue>, KeyValuePair<TKey, TValue>[]) 批量添加 ICollection AddRange<T>(ICollection<T>, IEnumerable<T>) 批量添加 AddRangeParams<T>(ICollection<T>, T[]) 批量添加 AddIfNotContainsParams<T>(ICollection<T>, T[]) 如果不包含，则添加 IEnumerable ForEach<T>(IEnumerable<T>, Action<T>) 对指定集合的每个元素执行指定操作。 Changed / 变更 ICollection AddIfNotContains<T>(ICollection<T>, ICollection<T>) 修改为 AddIfNotContains<T>(ICollection<T>, IEnumerable<T>) Array 移除 ForEach() ，使用 IEnumerable 中的 ForEach<T>(IEnumerable<T>, Action<T>) 0.3.3 Features / 新增功能 String AsFileStream(String, FileMode, FileAccess, FileShare, Int32) 转换为 FileStream Object SaveAsFile<T>(T, String) 保存为文件 Stream SaveAsFile(Stream, String) 保存为文件 Deserialize<T>(Stream) 反序列化 0.3.2 Features / 新增功能 IEnumerable Distinct<T, TResult>(IEnumerable<T>, Func<T, TResult>, IEqualityComparer<TResult>) 返回序列中的非重复元素 Object IsNull() 是否为空 0.3.1 Changed / 变更 IEnumerable.ContainsAny(this IEnumerable<T> @this, IEnumerable<T> items) 实现调整，统一语义为 this 是否包含 items 中任一元素 IEnumerable.ContainsAll(this IEnumerable<T> @this, IEnumerable<T> items) 实现调整，统一语义为 this 是否包含 items 中所有元素 0.3.0 Features / 新增功能 Object IsNullOrDbNull 是否 Null 或 DBNull String AppendPrefixIfNotExist 如果字符串不包含指定前缀，则添加前缀 AppendSuffixIfNotExist 如果字符串不包含指定后缀，则添加后缀 RemovePrefix 移除前缀，若前缀不符则返回原字符串 RemoveSuffix 移除后缀，若后缀不符则返回原字符串 0.2.9 (2019-06-21) Fixed / 修复 修复 nuget 包安装后注释缺失的问题 0.2.8 (2019-06-20) Features / 新增功能 IEnumerable<T> ForEach<T>(this IEnumerable<T> @this, Action<int, T> action) 对指定集合的每个元素执行指定操作 ToFormatString<T>(IEnumerable<T>, String, Func<T, Object[]>) 格式化为字符串 0.2.7 (2019-06-05) Features / 新增功能 String IsWhiteSpace 是否空白字符串 IsEmpty 是否空字符串 Object NotIn 当前对象是否不存在于集合内 NotInParams 当前对象是否不存在于数组内 0.2.6 (2019-06-03) Features / 新增功能 DataRow ToDynamicObject(this DataRow @this) 转换为动态对象 XmlDocument SelectNodesEnumerable(this XmlDocument @this, string xpath) 选择匹配 XPath 表达式的节点集合 Changed / 变更 移除 DataTableException DataTable ToDynamicObjects(this DataTable @this) 转换为动态对象集合 调整实现 IDictionary<TKey, TValue> ContainsValue 加入泛型约束 ContainsValueAny 加入泛型约束 ContainsValueAnyParams 加入泛型约束 ContainsValueAll 加入泛型约束 ContainsValueAllParams 加入泛型约束 0.2.5 (2019-05-30) Features / 新增功能 DataTable 扩展方法 ToDynamicObjects 转换为动态对象 0.2.4 (2019-05-26) Features / 新增功能 IDictionary 扩展方法 ContainsKeyAll<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<TKey>) 是否包含全部 Key ContainsKeyAllParams<TKey, TValue>(IDictionary<TKey, TValue>, TKey[]) 是否包含全部 Key ContainsKeyAny<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<TKey>) 是否包含任一 Key ContainsKeyAnyParams<TKey, TValue>(IDictionary<TKey, TValue>, TKey[]) 是否包含任一 Key ContainsValue<TKey, TValue>(IDictionary<TKey, TValue>, TValue) 是否包含 value ContainsValueAll<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<TValue>) 是否包含全部 Value ContainsValueAllParams<TKey, TValue>(IDictionary<TKey, TValue>, TValue[]) 是否包含全部 Value ContainsValueAny<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<TValue>) 是否包含任一 value ContainsValueAnyParams<TKey, TValue>(IDictionary<TKey, TValue>, TValue[]) 是否包含任一 value 0.2.3 (2019-05-26) Features / 新增功能 增加 DataRow 扩展方法 ToEntity<T>(DataRow, Func<DataRow, T, T>) 转换为实体 增加 DataTable 扩展方法 ToEntityList<T>(DataTable, Func<DataRow, T, T>) 转换为实体列表 增加 Object 扩展方法 InParams<T>(T, T[]) 当前对象是否存在于 items 数组内 InParams<T>(T, IEqualityComparer<T>, T[]) 当前对象是否存在于 items 数组内 Pipe<T>(T, Action<T>) 管道操作 - action Pipe<TSource, TResult>(TSource, Func<TSource, TResult>) 管道操作 - func 增加 DateTime 扩展方法 IsZeroTime(DateTime) 是否 0 时 0 分 0 秒 0.2.2 (2019-05-26) Features / 新增功能 增加 DateTime 扩展方法 Tomorrow(DateTime) 获取明天的 DateTime Yesterday(DateTime) 获取昨天的 DateTime 增加 Object 扩展方法 IsClass(Object) 当前对象类型是否 Class IsArray(Object) 当前对象类型是否 Array IsSerializable(Object) 当前对象类型是否可序列化的 IsValueType(Object) 当前对象类型是否值类型 IsEnum(Object) 当前对象类型是否枚举 GetTypeName(Object) 获取当前对象类型名称 增加 IDictionary 扩展方法 ContainsKeyAll<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<TKey>) 是否包含全部 Key ContainsKeyAny<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<TKey>) 是否包含任一 Key 0.2.1 (2019-05-24) Features / 新增功能 增加 DateTime 扩展方法: IsBetween(DateTime startDateTime, DateTime endDateTime) 是否在指定日期之间 StartOfMonth(DateTime) 获取月的开始 DateTime (year-month-day 00:00:00.000) EndOfMonth(DateTime) 获取月的结束 DateTime (year-month-day 23:59:59.999) StartOfYear(DateTime) 获取年的开始 DateTime (year-month-day 00:00:00.000) EndOfYear(DateTime) 获取年的结束 DateTime (year-month-day 23:59:59.999) IsToday(DateTime) 是否当天 IsWeekDay(DateTime) 是否工作日 (周一至周五) 增加 Object 扩展方法: In<T>(T, IEnumerable<T>) 当前对象是否存在于 items 集合内 In<T>(T, IEnumerable<T>, IEqualityComparer<T>) 当前对象是否存在于 items 集合内 0.2.0 (2019-05-21) Features / 新增功能 增加 IEnumerable<T> 扩展方法： ContainsAny(IEnumerable<T> items) 是否包含任一元素 ContainsAll(IEnumerable<T> items) 是否包含全部元素 增加 DateTime 扩展方法: SetTime(int hour, int minute, int second, int millisecond = 0) 设置 DateTime 的 time 部分 StartOfDay() 获取 DateTime 的开始 (year-month-day 00:00:00.000) EndOfDay() 获取 DateTime 的结束 (year-month-day 23:59:59.999) StartOfWeek() 获取本周开始的 DateTime (year-month-day 00:00:00.000) EndOfWeek() 获取本周结束的 DateTime (year-month-day 23:59:59.999) Changed / 变更 移除 DateTime 扩展方法: RemoveTimePart() 移除时间部分 0.1.9 (2019-05-18) Features / 新增功能 增加 DateTime 扩展方法: RemoveTimePart() 移除时间部分 增加 Array 扩展方法 ClearAll() 全部清除 ContainsIndex(int index) 是否包含索引 Sort() 排序 Reverse() 反转 Find() 返回数组中的第一个匹配元素 FindLast() 返回数组中的最后一个匹配元素 FindAll() 返回数组中所有匹配的元素 FindIndex() 返回数组中的第一个匹配元素的索引 FindLastIndex() 返回数组中的最后一个匹配元素的索引 ForEach() 对指定数组的每个元素执行指定操作 0.1.8 (2019-05-13) Features / 新增功能 增加 string 扩展方法: ToBytes(Encoding encoding = null) 转换为 byte 数组 IsLike(string pattern) *通配符比较是否相似 (特殊字符 用 \\ 转义) RegexIsMatch(string pattern) 正则表达式 - 是否匹配 RegexMatches(string pattern) 正则表达式匹配 - 所有匹配对象 RegexMatch(string pattern) 正则表达式匹配 - 单个匹配对象 RegexSplit(string pattern) 正则表达式拆分字符串 RegexReplace(string pattern, string replacement) 正则表达式替换字符串 RegexReplace(string pattern, MatchEvaluator evaluator) 正则表达式替换字符串 增加 byte[] 扩展方法: ToString(Encoding encoding) 转换为字符串 增加 ICollection 扩展方法: AddIfNotContains<T>(@this, T item) 如果不包含，则添加 AddIfNotContains<T>(ICollection<T> items) 如果不包含，则添加 增加 bool 扩展方法: IfTrue(Action action) 结果为 True 时，执行方法 IfTrue(T result) 结果为 True 时，返回参数 (结果为 False 时，返回参数类型默认值) IfFalse(Action action) 结果为 False 时，执行方法 IfTrue(T result) 结果为 False 时，返回参数 (结果为 True 时，返回参数类型默认值) 增加 int 扩展方法: IsEven() 是否偶数 IsOdd() 是否奇数 Times(Action action) 执行次数操作，次数基于原 int 值 Times(Action<int> action) 执行次数操作，次数基于原 int 值 IsInRange(int min, int max) 是否在指定范围内 增加 long 扩展方法: IsEven() 是否偶数 IsOdd() 是否奇数 Times(Action action) 执行次数操作，次数基于原 int 值 Times(Action<long> action) 执行次数操作，次数基于原 int 值 IsInRange(long min, long max) 是否在指定范围内 Changed / 变更 对扩展方法类名进行规范重命名 统一命名空间 Lett.Extensions.Exceptions IEnumerableExtensions IEnumerable 扩展方法 DataColumnCollectionExtensions DataColumnCollection 扩展方法 DataRowExtensions DataRow 扩展方法 DataTableExtensions DataTable 扩展方法 DateTimeExtensions DateTime 扩展方法 EnumExtensions Enum 扩展方法 IntExtensions int 扩展方法 ObjectExtensions object 扩展方法 StringExtensions string 扩展方法 TypeExtensions type 扩展方法 类名变更： LettExtensionsDataTableException -> DataTableException 0.1.7 (2019-04-28) Features / 新增功能 增加 System.String 拓展方法 Format(object[] args) 格式化 Left(int length) 从左侧返回指定长度的字符串 Right(int length) 从右侧返回指定长度的字符串 0.1.6 (2019-04-25) Features / 新增功能 增加 String.IsNullOrWhiteSpace() 是否 null 或空白 增加 String.ContainsAll() 是否全部包含，默认不区分大小写 增加 String.ContainsAny() 是否包含任意一个，默认不区分大小写 0.1.5 (2019-04-24) Features / 新增功能 增加 DataTable DataRow 转换实体方法 增加 DataColumnCollectionTest.AddRange 方法 获取 DataColumn 可枚举对象 ColumnsEnumerable() 获取 Column 的数据类型 GetColumnDataType(string columnName) 获取 Column 的数据类型 GetColumnDataType(int index) Changed / 变更 DataRow.Cell<T>() 系列方法，泛型约定调整为 实现了 IConvertible 接口的类型 Object.To<T>() 方法的泛型约定调整为 实现了 IConvertible 接口的类型 实现了 IConvertible 接口的类型 如：Boolean, Byte, Char, DateTime, System.DBNull, Decimal, Double, System.Enum, Int16, Int32, Int64, SByte, Single, String, UInt16, UInt32, UInt64 等 0.1.4 (2019-04-14) Features / 新增功能 增加 Object.IsDBNull 方法 Refactored / 优化重构 调整 Int32.GetEnumDescription()方法位置，使用无感知 X.X.X (2019-04-13) Features / 新增功能 Changed / 变更 Fixed / 修复 Removed / 删除 Deprecated / 即将删除 Refactored / 优化重构"
  },
  "api/Lett.Extensions.LongExtensions.html": {
    "href": "api/Lett.Extensions.LongExtensions.html",
    "title": "Class LongExtensions | Lett.Extensions",
    "keywords": "Class LongExtensions Long 扩展方法 Inheritance Object LongExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class LongExtensions Methods | Improve this Doc View Source IsEven(Int64) 是否偶数 Declaration public static bool IsEven(this long this) Parameters Type Name Description Int64 this Returns Type Description Boolean Examples 0L.IsEven(); // true | Improve this Doc View Source IsInRange(Int64, Int64, Int64) 是否在指定范围内 Declaration public static bool IsInRange(this long this, long min, long max) Parameters Type Name Description Int64 this Int64 min 最小值 Int64 max 最大值 Returns Type Description Boolean Examples (-1L).IsInRange(0, 10); // false 10L.IsInRange(0, 10); // true | Improve this Doc View Source IsOdd(Int64) 是否奇数 Declaration public static bool IsOdd(this long this) Parameters Type Name Description Int64 this Returns Type Description Boolean Examples (-1L).IsOdd(); // true | Improve this Doc View Source Times(Int64, Action) 执行次数操作，次数基于 this Declaration public static void Times(this long this, Action action) Parameters Type Name Description Int64 this Action action 执行的操作 Examples var rs = 0; 10L.Times(() => rs += 1); // rs == 10 Exceptions Type Condition ArgumentOutOfRangeException 执行次数 this 小于0 | Improve this Doc View Source Times(Int64, Action<Int64>) 执行次数操作，次数基于 this Declaration public static void Times(this long this, Action<long> action) Parameters Type Name Description Int64 this Action < Int64 > action 执行的操作(参数是从0开始的 index) Examples var rs2 = 0; 10L.Times(i => rs2 += i); // rs2 == 45 Exceptions Type Condition ArgumentOutOfRangeException 执行次数 this 小于0"
  },
  "api/Lett.Extensions.IEnumerableExtensions.html": {
    "href": "api/Lett.Extensions.IEnumerableExtensions.html",
    "title": "Class IEnumerableExtensions | Lett.Extensions",
    "keywords": "Class IEnumerableExtensions IEnumerable 扩展方法 Inheritance Object IEnumerableExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class IEnumerableExtensions Methods | Improve this Doc View Source ContainsAll<T>(IEnumerable<T>, IEnumerable<T>) 是否包含全部元素 this 是否包含 items 中全部元素 Declaration public static bool ContainsAll<T>(this IEnumerable<T> this, IEnumerable<T> items) Parameters Type Name Description IEnumerable <T> this IEnumerable <T> items 需要进行判断的元素集合 Returns Type Description Boolean Type Parameters Name Description T 集合中元素的类型 Examples var arr = new[] {\"aa\", \"bb\"}; var match = new[] {\"aa\"}; var match2 = new[] {\"aa\", \"bb\"}; var match2 = new[] {\"aa\", \"bb\", \"cc\"}; var rs = arr.ContainsAll(match); // true; var rs2 = arr.ContainsAll(match2); // true; var rs3 = arr.ContainsAll(match3); // false; Exceptions Type Condition ArgumentNullException this is null ArgumentNullException items is null | Improve this Doc View Source ContainsAny<T>(IEnumerable<T>, IEnumerable<T>) 是否包含任一元素 this 是否包含 items 中任一元素 Declaration public static bool ContainsAny<T>(this IEnumerable<T> this, IEnumerable<T> items) Parameters Type Name Description IEnumerable <T> this IEnumerable <T> items 需要进行判断的元素集合 Returns Type Description Boolean Type Parameters Name Description T 集合中元素的类型 Examples var arr = new[] {\"aa\", \"bb\"}; var match = new[] {\"aa\", \"bb\"}; var match2 = new [] {\"aa\", \"bb\", \"cc\"}; var rs = arr.ContainsAny(match); // true var rs2 = arr.ContainsAny(match2); // true Exceptions Type Condition ArgumentNullException this is null ArgumentNullException items is null | Improve this Doc View Source Distinct<T, TResult>(IEnumerable<T>, Func<T, TResult>) 返回序列中的非重复元素 Declaration public static IEnumerable<T> Distinct<T, TResult>(this IEnumerable<T> this, Func<T, TResult> selector) Parameters Type Name Description IEnumerable <T> this Func <T, TResult> selector 选择器，选择用于比较的对象 Returns Type Description IEnumerable <T> Type Parameters Name Description T TResult Examples var input = new List<MyClass> {new MyClass {Age = 2, Name = \"a\"}, new MyClass {Age = 2, Name = \"A\"}, new MyClass {Age = 2, Name = \"b\"}}; var rs1 = input.Distinct(s => s.Name).ToList(); rs1.Count; // 3 rs1[0].Name; // \"a\" var input = new List<MyClass> {new MyClass {Age = 2, Name = \"a\"}, new MyClass {Age = 2, Name = \"A\"}, new MyClass {Age = 2, Name = \"b\"}}; var rs2 = input.Distinct(s => s.Age).ToList(); rs2.Count; // 1 rs2[0]; // \"a\" Exceptions Type Condition ArgumentNullException this is null ArgumentNullException selector is null | Improve this Doc View Source Distinct<T, TResult>(IEnumerable<T>, Func<T, TResult>, IEqualityComparer<TResult>) 返回序列中的非重复元素 Declaration public static IEnumerable<T> Distinct<T, TResult>(this IEnumerable<T> this, Func<T, TResult> selector, IEqualityComparer<TResult> equalityComparer) Parameters Type Name Description IEnumerable <T> this Func <T, TResult> selector 选择器，选择用于比较的对象 IEqualityComparer <TResult> equalityComparer 比较器 Returns Type Description IEnumerable <T> Type Parameters Name Description T TResult Examples var input = new List<MyClass> {new MyClass {Age = 2, Name = \"a\"}, new MyClass {Age = 2, Name = \"A\"}, new MyClass {Age = 2, Name = \"b\"}}; var rs1 = input.Distinct(s => s.Name, StringComparer.OrdinalIgnoreCase) .ToList(); rs1.Count; // 2 rs1[0].Name; // \"a\" var input = new List<MyClass> {new MyClass {Age = 2, Name = \"a\"}, new MyClass {Age = 2, Name = \"A\"}, new MyClass {Age = 2, Name = \"b\"}}; var rs2 = input.Distinct(s => s.Age, EqualityComparer<int>.Default) .ToList(); rs2.Count; // 1 rs2[0]; // \"a\" Exceptions Type Condition ArgumentNullException this is null ArgumentNullException selector is null ArgumentNullException equalityComparer is null | Improve this Doc View Source Duplicates<T, TResult>(IEnumerable<T>, Func<T, TResult>) 返回序列中重复的元素 Declaration public static IEnumerable<TResult> Duplicates<T, TResult>(this IEnumerable<T> this, Func<T, TResult> selector) Parameters Type Name Description IEnumerable <T> this Func <T, TResult> selector 选择器，选择用于比较的对象 Returns Type Description IEnumerable <TResult> Type Parameters Name Description T TResult Exceptions Type Condition ArgumentNullException this is null ArgumentNullException selector is null | Improve this Doc View Source Duplicates<T, TResult>(IEnumerable<T>, Func<T, TResult>, IEqualityComparer<TResult>) 返回序列中重复的元素 Declaration public static IEnumerable<TResult> Duplicates<T, TResult>(this IEnumerable<T> this, Func<T, TResult> selector, IEqualityComparer<TResult> equalityComparer) Parameters Type Name Description IEnumerable <T> this Func <T, TResult> selector 选择器，选择用于比较的对象 IEqualityComparer <TResult> equalityComparer 比较器 Returns Type Description IEnumerable <TResult> Type Parameters Name Description T TResult Examples var input = new List<MyClass> {new MyClass {Age = 2, Name = \"a\"}, new MyClass {Age = 2, Name = \"A\"}, new MyClass {Age = 2, Name = \"b\"}}; var rs1 = input.Duplicates(s => s.Name, StringComparer.OrdinalIgnoreCase); // rs1 = {\"a\"} var input = new List<MyClass> {new MyClass {Age = 2, Name = \"a\"}, new MyClass {Age = 2, Name = \"A\"}, new MyClass {Age = 2, Name = \"b\"}}; var rs1 = input.Duplicates(s => s.Name); // rs1 = {} Exceptions Type Condition ArgumentNullException this is null ArgumentNullException selector is null ArgumentNullException equalityComparer is null | Improve this Doc View Source ForEach<T>(IEnumerable<T>, Action<T>) 对指定集合的每个元素执行指定操作。 Declaration public static void ForEach<T>(this IEnumerable<T> this, Action<T> action) Parameters Type Name Description IEnumerable <T> this Action <T> action 指定操作 T: 元素 Type Parameters Name Description T 元素类型 Examples var arr = new[] {\"aa\", \"bb\"}; var rs = new List<string>(); arr.ForEach(str => rs.Add(str)); // rs[0] = \"aa\" // rs[1] = \"bb\" Exceptions Type Condition ArgumentNullException this is null ArgumentNullException action is null | Improve this Doc View Source ForEach<T>(IEnumerable<T>, Action<Int32, T>) 对指定集合的每个元素执行指定操作。 Declaration public static void ForEach<T>(this IEnumerable<T> this, Action<int, T> action) Parameters Type Name Description IEnumerable <T> this Action < Int32 , T> action 指定操作 int: 数组元素的索引 T: 元素 Type Parameters Name Description T 元素类型 Examples var arr = new[] {\"aa\", \"bb\"}; var rs = new Dictionary<int, string>(); arr.ForEach((index, str) => rs.Add(index, str)); // rs[0] = \"aa\" // rs[1] = \"bb\" Exceptions Type Condition ArgumentNullException this is null ArgumentNullException action is null | Improve this Doc View Source IsNullOrEmpty<T>(IEnumerable<T>) 是否空或空集合 Declaration public static bool IsNullOrEmpty<T>(this IEnumerable<T> this) Parameters Type Name Description IEnumerable <T> this Returns Type Description Boolean Type Parameters Name Description T 集合中元素的类型 Examples var arr = new[] {\"aa\", \"bb\"}; var rs = arr.IsNullOrEmpty(); // false var arr2 = new string[] { }; var rs2 = arr.IsNullOrEmpty(); // true | Improve this Doc View Source SplitBlock<T>(IEnumerable<T>, Int32) 分割成指定size的块 like this : new[] {1, 2, 3, 4, 5, 6, 7}.SplitBlock(3); -> {{1, 2, 3}, {4, 5, 6}, {7}} Declaration public static IEnumerable<IEnumerable<T>> SplitBlock<T>(this IEnumerable<T> this, int size) Parameters Type Name Description IEnumerable <T> this Int32 size size Returns Type Description IEnumerable < IEnumerable <T>> Type Parameters Name Description T Examples var s = new[] {1, 2, 3, 4, 5, 6, 7}; var rs = s.Block(2); // rs = {{1, 2}, {3, 4}, {5, 6}, {7}} var rs2 = s.Block(3); // rs2 = {{1, 2, 3}, {4, 5, 6}, {7}} var rs3 = s.Block(4); // rs3 = {{1, 2, 3, 4}, {5, 6, 7}} Exceptions Type Condition ArgumentNullException this is null ArgumentException size less than 1 | Improve this Doc View Source ToFormatString<T>(IEnumerable<T>, String, Func<T, Object[]>) 格式化为字符串 Declaration public static string ToFormatString<T>(this IEnumerable<T> this, string formatStr, Func<T, object[]> formatParams) Parameters Type Name Description IEnumerable <T> this String formatStr 格式化字符串，如：\"[{0}]\" Func <T, Object []> formatParams 格式化字符串参数，需要与格式化字符串对应 Returns Type Description String Type Parameters Name Description T Examples var input = new List<string> {\"aa\", \"bb\", \"cc\", \"dd\"}; var rs = input.FormatString(\"[{0}]\", s => new []{s}); // rs = \"[aa][bb][cc][dd]\" var input2 = new Dictionary<string,object> { {\"key1\",1}, {\"key2\",\"value2\"}, {\"key3\",\"value3\"} }; var rs2 = input2.FormatString(\"[{0} - {1}]\\r\\n\", pair => new[] {pair.Key, pair.Value}); // rs2 = \"[key1 - 1]\\r\\n[key2 - value2]\\r\\n[key3 - value3]\\r\\n\" Exceptions Type Condition ArgumentNullException formatStr 为空 FormatException"
  },
  "api/Lett.Extensions.ICollectionsExtensions.html": {
    "href": "api/Lett.Extensions.ICollectionsExtensions.html",
    "title": "Class ICollectionsExtensions | Lett.Extensions",
    "keywords": "Class ICollectionsExtensions ICollections 扩展方法 Inheritance Object ICollectionsExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class ICollectionsExtensions Methods | Improve this Doc View Source AddIfNotContains<T>(ICollection<T>, T) 如果不包含，则添加 Declaration public static void AddIfNotContains<T>(this ICollection<T> this, T item) Parameters Type Name Description ICollection <T> this T item 匹配项 Type Parameters Name Description T 集合中元素的类型 Examples var list = new List<string> {\"aa\", \"bb\"}; list.AddIfNotContains(\"cc\"); list.AddIfNotContains(\"aa\"); // {\"aa\", \"bb\", \"cc\"} Exceptions Type Condition NotSupportedException this maybe is read-only | Improve this Doc View Source AddIfNotContains<T>(ICollection<T>, IEnumerable<T>) 如果不包含，则添加 Declaration public static void AddIfNotContains<T>(this ICollection<T> this, IEnumerable<T> items) Parameters Type Name Description ICollection <T> this IEnumerable <T> items 匹配项集合 Type Parameters Name Description T 集合中元素的类型 Examples var list = new List<string> {\"aa\", \"bb\"}; var appendList = new[] {\"cc\", \"aa\"}; list.AddIfNotContains(appendList); // {\"aa\", \"bb\", \"cc\"} Exceptions Type Condition NotSupportedException this maybe is read-only | Improve this Doc View Source AddIfNotContainsParams<T>(ICollection<T>, T[]) 如果不包含，则添加 Declaration public static void AddIfNotContainsParams<T>(this ICollection<T> this, params T[] items) Parameters Type Name Description ICollection <T> this T[] items 匹配项集合 Type Parameters Name Description T 集合中元素的类型 Examples var list = new List<string> {\"aa\", \"bb\"}; list.AddIfNotContains(\"cc\", \"aa\"); // {\"aa\", \"bb\", \"cc\"} Exceptions Type Condition NotSupportedException this maybe is read-only | Improve this Doc View Source AddRange<T>(ICollection<T>, IEnumerable<T>) 批量添加 Declaration public static void AddRange<T>(this ICollection<T> this, IEnumerable<T> items) Parameters Type Name Description ICollection <T> this IEnumerable <T> items Type Parameters Name Description T Examples var list = new List<string> {\"aa\", \"bb\"}; var appendList = new List<string> {\"cc\", \"aa\"}; list.AddRange(appendList); // {\"aa\", \"bb\", \"cc\", \"aa\"} Exceptions Type Condition NotSupportedException this maybe is read-only ArgumentNullException this | Improve this Doc View Source AddRangeParams<T>(ICollection<T>, T[]) 批量添加 Declaration public static void AddRangeParams<T>(this ICollection<T> this, params T[] items) Parameters Type Name Description ICollection <T> this T[] items Type Parameters Name Description T Examples var list = new List<string> {\"aa\", \"bb\"}; list.AddRange(\"cc\", \"aa\"); // {\"aa\", \"bb\", \"cc\", \"aa\"} Exceptions Type Condition NotSupportedException this maybe is read-only"
  },
  "api/Lett.Extensions.DateTimeExtensions.html": {
    "href": "api/Lett.Extensions.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | Lett.Extensions",
    "keywords": "Class DateTimeExtensions DateTime 扩展方法 Inheritance Object DateTimeExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class DateTimeExtensions Methods | Improve this Doc View Source EndOfDay(DateTime) 获取 DateTime 的结束 (year-month-day 23:59:59.999) Declaration public static DateTime EndOfDay(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description DateTime 返回一个新的 DateTime Examples var dt = new DateTime(2019, 4, 1, 1, 2, 3); var rs = dt.EndOfDay(); // rs == new DateTime(2019, 4, 1, 23, 59, 59, 999); Exceptions Type Condition ArgumentOutOfRangeException | Improve this Doc View Source EndOfMonth(DateTime) 获取月的结束 DateTime (year-month-day 23:59:59.999) Declaration public static DateTime EndOfMonth(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description DateTime Examples var dt = new DateTime(2019, 4, 12, 1, 2, 3); var rs = dt.EndOfMonth(); // 2019-04-30 23:59:59.999 Exceptions Type Condition ArgumentOutOfRangeException | Improve this Doc View Source EndOfWeek(DateTime, DayOfWeek) 获取本周结束的 DateTime (year-month-day 23:59:59.999) Declaration public static DateTime EndOfWeek(this DateTime this, DayOfWeek startOfWeek) Parameters Type Name Description DateTime this DayOfWeek startOfWeek 设置每周的起始 Returns Type Description DateTime 返回一个新的 DateTime Examples var dt2 = new DateTime(2019, 4, 1, 1, 2, 3); var rs2 = dt.EndOfWeek(DayOfWeek.Friday); // 2019-04-04 23:59:59.999 Exceptions Type Condition ArgumentOutOfRangeException | Improve this Doc View Source EndOfYear(DateTime) 获取年的结束 DateTime (year-month-day 23:59:59.999) Declaration public static DateTime EndOfYear(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description DateTime Examples var dt = new DateTime(2019, 4, 12, 1, 2, 3); var rs = dt.EndOfYear(); // 2019-12-31 23.59.59.999 Exceptions Type Condition ArgumentOutOfRangeException | Improve this Doc View Source GetTotalDays(DateTime) 获取时间戳的日表示 Declaration public static double GetTotalDays(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description Double Examples var dt = new DateTime(2019, 4, 1, 11, 11, 11); dt.GetTotalDays(); // 17987.466099537036 | Improve this Doc View Source GetTotalHours(DateTime) 获取时间戳的小时表示 Declaration public static double GetTotalHours(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description Double Examples var dt = new DateTime(2019, 4, 1, 11, 11, 11); dt.GetTotalHours(); // 431699.18638888886 | Improve this Doc View Source GetTotalMilliseconds(DateTime) 获取时间戳的毫秒表示 Declaration public static double GetTotalMilliseconds(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description Double Examples var dt = new DateTime(2019, 4, 1, 11, 11, 11); dt.GetTotalMilliseconds(); // 1554117071000 | Improve this Doc View Source GetTotalMinutes(DateTime) 获取时间戳的分钟表示 Declaration public static double GetTotalMinutes(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description Double Examples var dt = new DateTime(2019, 4, 1, 11, 11, 11); dt.GetTotalMinutes(); // 25901951.183333334 | Improve this Doc View Source GetTotalSeconds(DateTime) 获取时间戳的秒表示 Declaration public static double GetTotalSeconds(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description Double Examples var dt = new DateTime(2019, 4, 1, 11, 11, 11); dt.GetTotalSeconds(); // 1554117071 | Improve this Doc View Source IsBetween(DateTime, DateTime, DateTime) 是否在指定日期之间 Declaration public static bool IsBetween(this DateTime this, DateTime startDateTime, DateTime endDateTime) Parameters Type Name Description DateTime this DateTime startDateTime 开始时间 DateTime endDateTime 结束时间 Returns Type Description Boolean Examples var dt = new DateTime(2019,4,1); var startDate = new DateTime(2019,4,1,0,0,1); var endDate = new DateTime(2019,5,1); dt.IsBetween(startDateTime, endDateTime); // false | Improve this Doc View Source IsToday(DateTime) 是否当天 Declaration public static bool IsToday(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description Boolean Examples var dt = DateTime.Now; dt.IsToday(); // true var dt2 = new DateTime(2019,1,1); dt2.IsToday(); // false | Improve this Doc View Source IsWeekDay(DateTime) 是否工作日 (周一至周五) Declaration public static bool IsWeekDay(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description Boolean Examples var dt = new DateTime(2019,5,4); dt.IsWeekDay(); // false var dt2 = new DateTime(2019,5,1); dt2.IsWeekDay(); // true | Improve this Doc View Source IsZeroTime(DateTime) 是否 0 时 0 分 0 秒 Declaration public static bool IsZeroTime(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description Boolean Examples var dt = new DateTime(2019, 5, 4, 1, 1, 1); dt.IsZeroTime(); // false var dt = new DateTime(2019, 5, 4); dt.IsZeroTime(); // true | Improve this Doc View Source SetTime(DateTime, Int32, Int32, Int32) 设置DateTime的time部分 Declaration public static DateTime SetTime(this DateTime this, int hour, int minute, int second) Parameters Type Name Description DateTime this Int32 hour 小时 (0-23) Int32 minute 分钟 (0-59) Int32 second 秒 (0-59) Returns Type Description DateTime 返回一个新的 DateTime Examples var dt2 = new DateTime(2019, 4, 1, 1, 2, 3); var rs2 = dt2.SetTime(23, 11, 11, 999); Exceptions Type Condition ArgumentOutOfRangeException hour 、 minute 和 second 参数描述了一个无法表示的日期时间 | Improve this Doc View Source SetTime(DateTime, Int32, Int32, Int32, Int32) 设置DateTime的time部分 Declaration public static DateTime SetTime(this DateTime this, int hour, int minute, int second, int millisecond) Parameters Type Name Description DateTime this Int32 hour 小时 (0-23) Int32 minute 分钟 (0-59) Int32 second 秒 (0-59) Int32 millisecond 毫秒 (0-999) 默认0 Returns Type Description DateTime 返回一个新的 DateTime Examples var dt2 = new DateTime(2019, 4, 1, 1, 2, 3); var rs2 = dt2.SetTime(23, 11, 11, 999); Exceptions Type Condition ArgumentOutOfRangeException hour 、 minute 、 second 、 millisecond 参数描述了一个无法表示的日期时间 ArgumentOutOfRangeException millisecond 的有效值不在0和999之间 | Improve this Doc View Source StartOfDay(DateTime) 获取 DateTime 的开始 (year-month-day 00:00:00.000) Declaration public static DateTime StartOfDay(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description DateTime 返回一个新的 DateTime Examples var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); var rs = dt.StartOfDay(); // rs == new DateTime(2019, 4, 1, 0, 0, 0, 000) Exceptions Type Condition ArgumentOutOfRangeException | Improve this Doc View Source StartOfMonth(DateTime) 获取月的开始 DateTime (year-month-day 00:00:00.000) Declaration public static DateTime StartOfMonth(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description DateTime Examples var dt = new DateTime(2019, 4, 12, 1, 2, 3); var rs = dt.StartOfMonth(); // 2019-04-01 00:00:00.000 Exceptions Type Condition ArgumentOutOfRangeException | Improve this Doc View Source StartOfWeek(DateTime, DayOfWeek) 获取本周开始 DateTime (year-month-day 00:00:00.000) Declaration public static DateTime StartOfWeek(this DateTime this, DayOfWeek startOfWeek) Parameters Type Name Description DateTime this DayOfWeek startOfWeek 设置每周的起始 Returns Type Description DateTime 返回一个新的 DateTime Examples var dt = new DateTime(2019, 4, 1, 1, 2, 3); var rs = dt.StartOfWeek(DayOfWeek.Sunday); // 2019-03-31 00:00:00 Exceptions Type Condition ArgumentOutOfRangeException | Improve this Doc View Source StartOfYear(DateTime) 获取年的开始 DateTime (year-month-day 00:00:00.000) Declaration public static DateTime StartOfYear(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description DateTime Examples var dt = new DateTime(2019, 4, 12, 1, 2, 3); var rs = dt.StartOfYear(); // 2019-01-01 00:00:00.000 Exceptions Type Condition ArgumentOutOfRangeException | Improve this Doc View Source Tomorrow(DateTime) 获取明天的 DateTime Declaration public static DateTime Tomorrow(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description DateTime Examples var dt = new DateTime(2019, 5, 4); var rs = dt.Tomorrow(); // new DateTime(2019, 5, 5); var dt2 = DateTime.MaxValue; // error -> throw ArgumentOutOfRangeException Exceptions Type Condition ArgumentOutOfRangeException | Improve this Doc View Source ToString_Base(DateTime) 格式化为 yyyy-MM-dd HH:mm:ss Declaration public static string ToString_Base(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description String Examples var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_Base(); // \"2019-04-01 21:11:11\" Exceptions Type Condition FormatException ArgumentOutOfRangeException | Improve this Doc View Source ToString_Day(DateTime) 格式化为 yyyy-MM-dd Declaration public static string ToString_Day(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description String Examples var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_Day(); // \"2019-04-01\" Exceptions Type Condition FormatException ArgumentOutOfRangeException | Improve this Doc View Source ToString_Full(DateTime) 格式化为 yyyy-MM-dd HH:mm:ss.fffffff Declaration public static string ToString_Full(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description String Examples var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_Full(); // \"2019-04-01 21:11:11.1230000\" Exceptions Type Condition FormatException ArgumentOutOfRangeException | Improve this Doc View Source ToString_Month(DateTime) 格式化为 yyyy-MM Declaration public static string ToString_Month(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description String Examples var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_Month(); // \"2019-04\" Exceptions Type Condition FormatException ArgumentOutOfRangeException | Improve this Doc View Source ToString_ShortDay(DateTime) 格式化为 yy-M-d Declaration public static string ToString_ShortDay(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description String Examples var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_ShortDay(); // \"19-4-1\" Exceptions Type Condition FormatException ArgumentOutOfRangeException | Improve this Doc View Source ToString_ShortMonth(DateTime) 格式化为 yy-M Declaration public static string ToString_ShortMonth(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description String Examples var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_ShortMonth(); // \"19-4\" Exceptions Type Condition FormatException ArgumentOutOfRangeException | Improve this Doc View Source ToString_ShortTime(DateTime) 格式化为 hh:mm:ss tt eg. 11:23:02 PM Declaration public static string ToString_ShortTime(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description String Examples var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_ShortTime(); // \"09:11:11 PM\" Exceptions Type Condition FormatException ArgumentOutOfRangeException | Improve this Doc View Source ToString_ShortYear(DateTime) 格式化为 yy Declaration public static string ToString_ShortYear(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description String Examples var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_ShortYear(); // \"19\" Exceptions Type Condition FormatException ArgumentOutOfRangeException | Improve this Doc View Source ToString_Time(DateTime) 格式化为 HH:mm:ss Declaration public static string ToString_Time(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description String Examples var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_Time(); // \"21:11:11\" Exceptions Type Condition FormatException ArgumentOutOfRangeException | Improve this Doc View Source ToString_Year(DateTime) 格式化为 yyyy Declaration public static string ToString_Year(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description String Examples var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_Year(); // \"2019\" Exceptions Type Condition FormatException ArgumentOutOfRangeException | Improve this Doc View Source Yesterday(DateTime) 获取昨天的 DateTime Declaration public static DateTime Yesterday(this DateTime this) Parameters Type Name Description DateTime this Returns Type Description DateTime Examples var dt = new DateTime(2019, 5, 4, 1, 1, 1); var rs = dt.Yesterday(); // new DateTime(2019, 5, 3, 1, 1, 1) var dt2 = DateTime.MinValue; // error -> throw ArgumentOutOfRangeException Exceptions Type Condition ArgumentOutOfRangeException"
  },
  "api/Lett.Extensions.DataColumnCollectionExtensions.html": {
    "href": "api/Lett.Extensions.DataColumnCollectionExtensions.html",
    "title": "Class DataColumnCollectionExtensions | Lett.Extensions",
    "keywords": "Class DataColumnCollectionExtensions DataColumnCollection 扩展方法 Inheritance Object DataColumnCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class DataColumnCollectionExtensions Methods | Improve this Doc View Source AddRange(DataColumnCollection, IEnumerable<String>) 批量增加 DataColumn Declaration public static void AddRange(this DataColumnCollection this, IEnumerable<string> columnNames) Parameters Type Name Description DataColumnCollection this IEnumerable < String > columnNames 列名集合 Examples var dt = new DataTable(); var colNames = new List<string> {\"Field1\", \"Field2\", \"Field3\"}; dt.Columns.AddRange(colNames); // dt.Columns == {\"Field1\", \"Field2\", \"Field3\"} Exceptions Type Condition DuplicateNameException columnNames 有特殊列名 | Improve this Doc View Source AddRangeParams(DataColumnCollection, String[]) 批量增加 DataColumn Declaration public static void AddRangeParams(this DataColumnCollection this, params string[] columnNames) Parameters Type Name Description DataColumnCollection this String [] columnNames 列名集合 Examples var dt = new DataTable(); dt.Columns.AddRange(\"Field1\", \"Field2\", \"Field3\"); // dt.Columns == {\"Field1\", \"Field2\", \"Field3\"} Exceptions Type Condition DuplicateNameException columnNames 有特殊列名"
  },
  "api/Lett.Extensions.BooleanExtensions.html": {
    "href": "api/Lett.Extensions.BooleanExtensions.html",
    "title": "Class BooleanExtensions | Lett.Extensions",
    "keywords": "Class BooleanExtensions bool 扩展方法 Inheritance Object BooleanExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class BooleanExtensions Methods | Improve this Doc View Source IfFalse(Boolean, Action) 结果为 False 时，执行方法 Declaration public static void IfFalse(this bool this, Action action) Parameters Type Name Description Boolean this 结果 Action action 执行的方法 Examples var condition = true; var rs = \"\"; condition.IfFalse(() => rs = \"it is false\"); // rs == \"\"; var condition = false; var rs = \"\"; condition.IfFalse(() => rs = \"it is false\"); // rs == \"it is false\"; | Improve this Doc View Source IfFalse<T>(Boolean, T) 结果为 False 时，返回参数 结果为 True 时，返回参数类型默认值 Declaration public static T IfFalse<T>(this bool this, T result) Parameters Type Name Description Boolean this 结果 T result 参数 Returns Type Description T Type Parameters Name Description T 参数类型 Examples var condition = true; var rs = \"\"; rs = condition.IfFalse(\"it is false\"); // rs == null == default(string) var condition = false; var rs = \"\"; rs = condition.IfFalse(\"it is false\"); // rs == \"it is false\" | Improve this Doc View Source IfTrue(Boolean, Action) 结果为 True 时，执行方法 Declaration public static void IfTrue(this bool this, Action action) Parameters Type Name Description Boolean this Action action 执行的方法 Examples var condition = true; var rs = \"\"; condition.IfTrue(() => rs = \"it is true\"); // rs == \"it is true\"; var condition = false; var rs = \"\"; condition.IfTrue(() => rs = \"it is true\"); // rs == \"\"; | Improve this Doc View Source IfTrue<T>(Boolean, T) 结果为 True 时，返回参数 结果为 False 时，返回参数类型默认值 Declaration public static T IfTrue<T>(this bool this, T result) Parameters Type Name Description Boolean this T result 参数 Returns Type Description T Type Parameters Name Description T 参数类型 Examples var condition = true; var rs = \"\"; rs = condition.IfTrue(\"it is true\"); // rs == \"it is true\"; var condition = false; var rs = \"\"; rs = condition.IfTrue(\"it is true\"); // rs == null == default(string)"
  },
  "api/Lett.Extensions.html": {
    "href": "api/Lett.Extensions.html",
    "title": "Namespace Lett.Extensions | Lett.Extensions",
    "keywords": "Namespace Lett.Extensions Classes ArrayExtensions Array 扩展方法 BooleanExtensions bool 扩展方法 ByteExtensions Bytes 扩展方法 DataColumnCollectionExtensions DataColumnCollection 扩展方法 DataRowExtensions DataRow 扩展方法 DataTableExtensions DataTable 扩展方法 DateTimeExtensions DateTime 扩展方法 EnumExtensions Enum 扩展方法 GuidExtensions ICollectionsExtensions ICollections 扩展方法 IDictionaryExtensions IDictionary 扩展方法 IEnumerableExtensions IEnumerable 扩展方法 IntExtensions Int 扩展方法 LongExtensions Long 扩展方法 ObjectExtensions Object 扩展方法 StreamExtensions Stream 扩展方法 StringExtensions string 扩展方法 TypeExtensions type 扩展方法 XmlDocumentExtensions XmlDocument 扩展方法"
  },
  "api/Lett.Extensions.XmlDocumentExtensions.html": {
    "href": "api/Lett.Extensions.XmlDocumentExtensions.html",
    "title": "Class XmlDocumentExtensions | Lett.Extensions",
    "keywords": "Class XmlDocumentExtensions XmlDocument 扩展方法 Inheritance Object XmlDocumentExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class XmlDocumentExtensions Methods | Improve this Doc View Source SelectNodesEnumerable(XmlDocument, String) 选择匹配 XPath 表达式的节点集合 匹配结果为空时，返回 null Declaration public static IEnumerable<XmlNode> SelectNodesEnumerable(this XmlDocument this, string xpath) Parameters Type Name Description XmlDocument this String xpath xpath Returns Type Description IEnumerable < XmlNode > Examples var xmlDoc = new XmlDocument(); xmlDoc.Load(\"System.Xml.XmlDocument/test.xml\"); var xpath = \"/functional/dataSource/storeSource/columns/column\"; var rs = xmlDoc.SelectNodesEnumerable(xpath); // rs.ToList()[0]?.Attributes?.GetNamedItem(\"name\").Value; == \"FRowId\" // xmlDoc.SelectNodesEnumerable(null); // error throw ArgumentNullException xmlDoc = null; var rs = xmlDoc.SelectNodesEnumerable(xpath); // error error throw ArgumentNullException Exceptions Type Condition ArgumentNullException this is null ArgumentNullException xpath is null"
  },
  "api/Lett.Extensions.IDictionaryExtensions.html": {
    "href": "api/Lett.Extensions.IDictionaryExtensions.html",
    "title": "Class IDictionaryExtensions | Lett.Extensions",
    "keywords": "Class IDictionaryExtensions IDictionary 扩展方法 Inheritance Object IDictionaryExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class IDictionaryExtensions Methods | Improve this Doc View Source AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) 添加或更新 当 this 中不存在 key 时，将 { key , value } 添加到 this 中 Declaration public static void AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> this, TKey key, TValue value) Parameters Type Name Description IDictionary <TKey, TValue> this TKey key 键 TValue value 值 Type Parameters Name Description TKey TValue Examples var dict2 = new Dictionary<string, int>{{\"a\",1},{\"b\",2}}; dict2.AddOrSet(new KeyValuePair<string, int>(\"a\",3)); dict2.AddOrSet(new KeyValuePair<string, int>(\"c\",3)); // dict1 => {{\"a\", 3}, {\"b\", 2}, {\"c\", 3}} Exceptions Type Condition ArgumentNullException key is null NotSupportedException this maybe is read-only | Improve this Doc View Source AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, KeyValuePair<TKey, TValue>) 添加或更新 当 this 中不存在 pair 的 Key 时，将 pair 的 Value 添加到 this 中 Declaration public static void AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> this, KeyValuePair<TKey, TValue> pair) Parameters Type Name Description IDictionary <TKey, TValue> this KeyValuePair <TKey, TValue> pair 键值对 Type Parameters Name Description TKey TValue Examples var dict1 = new Dictionary<string, int> {{\"a\", 1}, {\"b\", 2}}; dict1.AddOrSet(\"a\", 3); dict1.AddOrSet(\"c\", 3); // dict1 => {{\"a\", 3}, {\"b\", 2}, {\"c\", 3}} Exceptions Type Condition ArgumentNullException key is null NotSupportedException this maybe is read-only | Improve this Doc View Source AddOrUpdateRange<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>) 批量添加或更新 遍历 pairs , 当 this 中不存在 pair 的 Key 时，将 pair 的 Value 添加到 this 中 Declaration public static void AddOrUpdateRange<TKey, TValue>(this IDictionary<TKey, TValue> this, IEnumerable<KeyValuePair<TKey, TValue>> pairs) Parameters Type Name Description IDictionary <TKey, TValue> this IEnumerable < KeyValuePair <TKey, TValue>> pairs Type Parameters Name Description TKey TValue Examples var dict1 = new Dictionary<string, int> {{\"a\", 1}, {\"b\", 2}}; var sameDict = new Dictionary<string, int> {{\"a\", 3}, {\"b\", 4}, {\"c\", 5}}; dict1.AddOrUpdateRange(sameDict); // dict1 => {{\"a\", 3}, {\"b\", 4}, {\"c\", 5}} Exceptions Type Condition ArgumentNullException NotSupportedException this maybe is read-only | Improve this Doc View Source AddRange<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>) 批量添加 Declaration public static void AddRange<TKey, TValue>(this IDictionary<TKey, TValue> this, IEnumerable<KeyValuePair<TKey, TValue>> pairs) Parameters Type Name Description IDictionary <TKey, TValue> this IEnumerable < KeyValuePair <TKey, TValue>> pairs 键值对集合 Type Parameters Name Description TKey TValue Examples var dict = new Dictionary<string, int> {{\"a\", 1}, {\"b\", 2}}; var appendDict = new Dictionary<string, int> {{\"c\", 3}, {\"d\", 4}}; dict.AddRange(appendDict); // dict = {{\"a\", 1}, {\"b\", 2}, {\"c\", 3}, {\"d\", 4}}; Exceptions Type Condition ArgumentException pairs has same key | Improve this Doc View Source AddRangeParams<TKey, TValue>(IDictionary<TKey, TValue>, KeyValuePair<TKey, TValue>[]) 批量添加 Declaration public static void AddRangeParams<TKey, TValue>(this IDictionary<TKey, TValue> this, params KeyValuePair<TKey, TValue>[] pairs) Parameters Type Name Description IDictionary <TKey, TValue> this KeyValuePair <TKey, TValue>[] pairs 键值对数组 Type Parameters Name Description TKey TValue Examples var dict = new Dictionary<string, int> {{\"a\", 1}, {\"b\", 2}}; dict.AddRangeParams(new KeyValuePair<string, int>(\"c\", 3), new KeyValuePair<string, int>(\"d\", 4)); // dict = {{\"a\", 1}, {\"b\", 2}, {\"c\", 3}, {\"d\", 4}}; Exceptions Type Condition ArgumentException pairs has same key | Improve this Doc View Source ContainsKeyAll<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<TKey>) 是否包含全部 Key Declaration public static bool ContainsKeyAll<TKey, TValue>(this IDictionary<TKey, TValue> this, IEnumerable<TKey> keys) Parameters Type Name Description IDictionary <TKey, TValue> this IEnumerable <TKey> keys Key 集合 Returns Type Description Boolean Type Parameters Name Description TKey Key 类型 TValue Value 类型 var dict = new Dictionary<string, object> { {\"1\", \"1\"}, {\"2\", \"2\"}, {\"3\", \"3\"}, {\"4\", \"4\"}, }; var keys = new[] {\"6\"}; var keys2 = new List<string> {\"1\", \"2\", \"3\", \"4\"}; dict.ContainsKeyAll(keys); // false dict.ContainsKeyAll(keys2); // true var dict = new Dictionary<string, object> { {\"1\", \"1\"}, {\"2\", \"2\"}, {\"3\", \"3\"}, {\"4\", \"4\"}, }; Dictionary<string, object> dict2 = null; var keys = new[] {\"6\"}; List<string> keys3 = null; dict2.ContainsKeyAll(keys); // error -> throw ArgumentNullException dict2 is null dict.ContainsKeyAll(keys3); // error -> throw ArgumentNullException keys3 is null Exceptions Type Condition ArgumentNullException this is null ArgumentNullException keys is null | Improve this Doc View Source ContainsKeyAllParams<TKey, TValue>(IDictionary<TKey, TValue>, TKey[]) 是否包含全部 Key Declaration public static bool ContainsKeyAllParams<TKey, TValue>(this IDictionary<TKey, TValue> this, params TKey[] keys) Parameters Type Name Description IDictionary <TKey, TValue> this TKey[] keys params TKey [] Returns Type Description Boolean Type Parameters Name Description TKey Key 类型 TValue Value 类型 Examples var dict = new Dictionary<string, object> { {\"1\", \"1\"}, {\"2\", \"2\"}, {\"3\", \"3\"}, {\"4\", \"4\"}, }; dict.ContainsKeyAll(keys3); // error -> throw ArgumentNullException keys3 is null Exceptions Type Condition ArgumentNullException this is null ArgumentNullException keys is null | Improve this Doc View Source ContainsKeyAny<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<TKey>) 是否包含任一 Key Declaration public static bool ContainsKeyAny<TKey, TValue>(this IDictionary<TKey, TValue> this, IEnumerable<TKey> keys) Parameters Type Name Description IDictionary <TKey, TValue> this IEnumerable <TKey> keys Key 集合 Returns Type Description Boolean Type Parameters Name Description TKey Key 类型 TValue Value 类型 Examples var dict = new Dictionary<string, object> { {\"1\", \"1\"}, {\"2\", \"2\"}, {\"3\", \"3\"}, {\"4\", \"4\"}, }; var keys = new[] {\"6\"}; var keys2 = new List<string> {\"1\"}; dict.ContainsKeyAny(keys); // false dict.ContainsKeyAny(keys2); // true var dict = new Dictionary<string, object> { {\"1\", \"1\"}, {\"2\", \"2\"}, {\"3\", \"3\"}, {\"4\", \"4\"}, }; Dictionary<string, object> dict2 = null; var keys = new[] {\"6\"}; List<string> keys3 = null; dict2.ContainsKeyAny(keys); // error -> throw ArgumentNullException dict2 is null dict.ContainsKeyAny(keys3); // error -> throw ArgumentNullException keys3 is null Exceptions Type Condition ArgumentNullException this is null ArgumentNullException keys is null | Improve this Doc View Source ContainsKeyAnyParams<TKey, TValue>(IDictionary<TKey, TValue>, TKey[]) 是否包含任一 Key Declaration public static bool ContainsKeyAnyParams<TKey, TValue>(this IDictionary<TKey, TValue> this, params TKey[] keys) Parameters Type Name Description IDictionary <TKey, TValue> this TKey[] keys params TKey [] Returns Type Description Boolean Type Parameters Name Description TKey Key 类型 TValue Value 类型 Examples var dict = new Dictionary<string, object> { {\"1\", \"1\"}, {\"2\", \"2\"}, {\"3\", \"3\"}, {\"4\", \"4\"}, }; dict2.ContainsKeyAny(\"1\", \"2\"); // true Exceptions Type Condition ArgumentNullException this is null ArgumentNullException keys is null | Improve this Doc View Source ContainsValue<TKey, TValue>(IDictionary<TKey, TValue>, TValue) 是否包含 value Declaration public static bool ContainsValue<TKey, TValue>(this IDictionary<TKey, TValue> this, TValue value) where TValue : class Parameters Type Name Description IDictionary <TKey, TValue> this TValue value Returns Type Description Boolean Type Parameters Name Description TKey TValue 泛型约束: class Exceptions Type Condition ArgumentNullException this is null ArgumentNullException value is null | Improve this Doc View Source ContainsValueAll<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<TValue>) 是否包含全部 Value Declaration public static bool ContainsValueAll<TKey, TValue>(this IDictionary<TKey, TValue> this, IEnumerable<TValue> values) where TValue : class Parameters Type Name Description IDictionary <TKey, TValue> this IEnumerable <TValue> values Returns Type Description Boolean Type Parameters Name Description TKey Key 类型 TValue Value 类型 泛型约束: class Examples var dict = new Dictionary<string, object> { {\"Key1\", \"1Value\"}, {\"Key2\", \"2Value\"}, {\"Key3\", \"3Value\"}, {\"Key4\", \"4Value\"}, }; var values = new List<string> {\"1Value\", \"2Value\", \"3Value\", \"4Value\"}; var values2 = new List<string> {\"1Value\", \"2Value\", \"3Value\", \"4Value\", \"6666Value\"}; Dictionary<string, object> dict2 = null; dict.ContainsValueAll(values); // true dict.ContainsValueAll(values2); // false dict.ContainsValueAllParams(\"1Value\", \"2Value\", \"3Value\", \"4Value\"); // true dict.ContainsValueAllParams(\"1Value\", \"2Value\", \"3Value\", \"4Value\",\"6666Value\"); // false dict2.ContainsValueAll(values); // throw ArgumentNullException this is null dict.ContainsValueAllParams(null); // throw ArgumentNullException values is null Exceptions Type Condition ArgumentNullException this is null ArgumentNullException values is null | Improve this Doc View Source ContainsValueAllParams<TKey, TValue>(IDictionary<TKey, TValue>, TValue[]) 是否包含全部 Value Declaration public static bool ContainsValueAllParams<TKey, TValue>(this IDictionary<TKey, TValue> this, params TValue[] values) where TValue : class Parameters Type Name Description IDictionary <TKey, TValue> this TValue[] values params TValue [] Returns Type Description Boolean Type Parameters Name Description TKey Key 类型 TValue Value 类型 泛型约束: class Examples var dict = new Dictionary<string, object> { {\"Key1\", \"1Value\"}, {\"Key2\", \"2Value\"}, {\"Key3\", \"3Value\"}, {\"Key4\", \"4Value\"}, }; var values = new List<string> {\"1Value\", \"2Value\", \"3Value\", \"4Value\"}; var values2 = new List<string> {\"1Value\", \"2Value\", \"3Value\", \"4Value\", \"6666Value\"}; Dictionary<string, object> dict2 = null; dict.ContainsValueAll(values); // true dict.ContainsValueAll(values2); // false dict.ContainsValueAllParams(\"1Value\", \"2Value\", \"3Value\", \"4Value\"); // true dict.ContainsValueAllParams(\"1Value\", \"2Value\", \"3Value\", \"4Value\",\"6666Value\"); // false dict2.ContainsValueAll(values); // throw ArgumentNullException this is null dict.ContainsValueAllParams(null); // throw ArgumentNullException values is null Exceptions Type Condition ArgumentNullException this is null ArgumentNullException values is null | Improve this Doc View Source ContainsValueAny<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<TValue>) 是否包含任一 value Declaration public static bool ContainsValueAny<TKey, TValue>(this IDictionary<TKey, TValue> this, IEnumerable<TValue> values) where TValue : class Parameters Type Name Description IDictionary <TKey, TValue> this IEnumerable <TValue> values value 集合 Returns Type Description Boolean Type Parameters Name Description TKey Key 类型 TValue Value 类型 泛型约束: class Examples var dict = new Dictionary<string,object> { {\"Key1\", \"1Value\"}, {\"Key2\", \"2Value\"}, {\"Key3\", \"3Value\"}, {\"Key4\", \"4Value\"}, }; var values = new List<string> {\"1Value\"}; var values2 = new List<string> {\"6666Value\"}; Dictionary<string, object> dict2 = null; dict.ContainsValueAny(values); // true dict.ContainsValueAny(values2); // false dict.ContainsValueAnyParams(\"1Value\"); // true dict2.ContainsKeyAll(values); // throw ArgumentNullException this is null dict.ContainsKeyAllParams(null); // throw ArgumentNullException values is null Exceptions Type Condition ArgumentNullException this is null ArgumentNullException values is null | Improve this Doc View Source ContainsValueAnyParams<TKey, TValue>(IDictionary<TKey, TValue>, TValue[]) 是否包含任一 value Declaration public static bool ContainsValueAnyParams<TKey, TValue>(this IDictionary<TKey, TValue> this, params TValue[] values) where TValue : class Parameters Type Name Description IDictionary <TKey, TValue> this TValue[] values params TValue [] Returns Type Description Boolean Type Parameters Name Description TKey Key 类型 TValue Value 类型 泛型约束: class Examples var dict = new Dictionary<string,object> { {\"Key1\", \"1Value\"}, {\"Key2\", \"2Value\"}, {\"Key3\", \"3Value\"}, {\"Key4\", \"4Value\"}, }; var values = new List<string> {\"1Value\"}; var values2 = new List<string> {\"6666Value\"}; Dictionary<string, object> dict2 = null; dict.ContainsValueAny(values); // true dict.ContainsValueAny(values2); // false dict.ContainsValueAnyParams(\"1Value\"); // true dict2.ContainsKeyAll(values); // throw ArgumentNullException this is null dict.ContainsKeyAllParams(null); // throw ArgumentNullException values is null Exceptions Type Condition ArgumentNullException this is null ArgumentNullException values is null | Improve this Doc View Source GetOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) 获取值或更新 当 this 中不存在 key 时，将 { key , value } 添加到 this 中，并返回 value Declaration public static TValue GetOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> this, TKey key, TValue value) Parameters Type Name Description IDictionary <TKey, TValue> this TKey key 键 TValue value 值 Returns Type Description TValue Type Parameters Name Description TKey TValue Examples var dict = new Dictionary<string, int> {{\"a\", 1}, {\"b\", 2}}; var rs = dict.GetOrUpdate(\"c\", 3); // rs = 3; // dict = {{\"a\", 1}, {\"b\", 2}, {\"c\", 3}}; Exceptions Type Condition ArgumentNullException key is null NotSupportedException this maybe is read-only"
  },
  "api/Lett.Extensions.GuidExtensions.html": {
    "href": "api/Lett.Extensions.GuidExtensions.html",
    "title": "Class GuidExtensions | Lett.Extensions",
    "keywords": "Class GuidExtensions Inheritance Object GuidExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class GuidExtensions Methods | Improve this Doc View Source GetNewGuidIfEmpty(Guid) 当 this 为 Guid.Empty 时，返回新的 Guid/> Declaration public static Guid GetNewGuidIfEmpty(this Guid this) Parameters Type Name Description Guid this Returns Type Description Guid Examples var guid = Guid.Empty; guid = guid.GetNewGuidIfEmpty();"
  },
  "api/Lett.Extensions.EnumExtensions.html": {
    "href": "api/Lett.Extensions.EnumExtensions.html",
    "title": "Class EnumExtensions | Lett.Extensions",
    "keywords": "Class EnumExtensions Enum 扩展方法 Inheritance Object EnumExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Lett.Extensions Assembly : Lett.Extensions.dll Syntax public static class EnumExtensions Methods | Improve this Doc View Source GetDescription(Enum) 获取枚举描述 需要在枚举中加入 Description 属性 示例 private enum MyEnum { [Description(\"这里是EnumValue0的描述\")] EnumValue0 = 0, } Declaration public static string GetDescription(this Enum this) Parameters Type Name Description Enum this Returns Type Description String 获取失败时 返回null Examples var rs = MyEnum.EnumValue0.GetDescription(); // rs == \"这里是EnumValue0的描述\" Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException AmbiguousMatchException TypeLoadException"
  }
}