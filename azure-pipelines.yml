trigger:
  branches:
    include:
      - master
      - develop
      - release/*
  paths:
    exclude:
      - README.md
      - docs/*

variables:
  dotnetVersion: 2.2.300

jobs:
  # Linux (Docker - ubuntu-16.04)
  - job: Docker_ubuntu_1604
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - task: UseDotNet@2
        displayName: '安装 .NET Core sdk'
        inputs:
          packageType: sdk
          version: $(dotnetVersion)
          installationPath: $(Agent.ToolsDirectory)/dotnet
      - bash: |
          chmod +x ./build.sh
          ./build.sh
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
        displayName: 执行 cake - Linux (Docker - ubuntu-16.04)
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: 'TestResults/*.xml'

  # MacOS (Docker - macOS-10.14)
  - job: Docker_MacOS_1014
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - task: UseDotNet@2
        displayName: '安装 .NET Core sdk'
        inputs:
          packageType: sdk
          version: $(dotnetVersion)
          installationPath: $(Agent.ToolsDirectory)/dotnet
      - bash: |
          chmod +x ./build.sh
          ./build.sh
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
        displayName: 执行 cake - MacOS (Docker - macOS-10.14)
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: './TestResults/**.xml'
# # Windows (Docker - windows-2019)
# - job: Docker_Windows_2019
#   pool:
#     vmImage: 'windows-2019'
#   steps:
#   - task: UseDotNet@2
#     displayName: '安装 .NET Core sdk'
#     inputs:
#       packageType: sdk
#       version: $(dotnetVersion)
#       installationPath: $(Agent.ToolsDirectory)/dotnet
#   - powershell: ./build.ps1
#     env:
#       DOTNET_CLI_TELEMETRY_OPTOUT: 1
#     condition: eq( variables['Agent.OS'], 'Windows_NT' )
#     displayName: 执行 cake - Windows (Docker - windows-2019)

# # Windows (Windows 2019 with VS2019)
# - job: Hosted_Windows_2019
#   pool:
#     name: Hosted Windows 2019 with VS2019
#   steps:
#   - task: UseDotNet@2
#     displayName: '安装 .NET Core sdk'
#     inputs:
#       packageType: sdk
#       version: $(dotnetVersion)
#       installationPath: $(Agent.ToolsDirectory)/dotnet
#   - powershell: ./build.ps1
#     env:
#         DOTNET_CLI_TELEMETRY_OPTOUT: 1
#     condition: eq( variables['Agent.OS'], 'Windows_NT' )
#     displayName: 执行 cake - Hosted (Windows 2019 with VS2019)

# # Windows (Windows 2019 with VS2019)
# - job: Hosted_VS2017
#   pool:
#     name: Hosted Windows 2019 with VS2019
#   steps:
#   - task: UseDotNet@2
#     displayName: '安装 .NET Core sdk'
#     inputs:
#       packageType: sdk
#       version: $(dotnetVersion)
#       installationPath: $(Agent.ToolsDirectory)/dotnet
#   - powershell: ./build.ps1
#     env:
#         DOTNET_CLI_TELEMETRY_OPTOUT: 1
#     condition: eq( variables['Agent.OS'], 'Windows_NT' )
#     displayName: 执行 cake - Hosted (Hosted_VS2017)

# - job: Build_NuGet_Package
#   dependsOn:
#   - Docker_ubuntu_1604
#   - Docker_MacOS_1014
#   - Docker_Windows_2019
#   - Hosted_Windows_2019
#   - Hosted_VS2017
#   condition: |
#     and(succeeded('Docker_ubuntu_1604', 'Docker_MacOS_1014', 'Docker_Windows_2019', 'Hosted_Windows_2019', 'Hosted_VS2017'),
#     eq(variables['isPushNuget'], 'true'))
#   pool:
#     name: Hosted Windows 2019 with VS2019
#   steps:
#     - task: UseDotNet@2
#       displayName: '安装 .NET Core sdk'
#       inputs:
#         packageType: sdk
#         version: $(dotnetVersion)
#         installationPath: $(Agent.ToolsDirectory)/dotnet
#     - powershell: ./build.ps1 --target=Publish --packVer=$(packVersion)
#       condition: eq( variables['Agent.OS'], 'Windows_NT' )
#       displayName: Windows (Windows 2019 with VS2019) 平台 执行 cake pack
#     - task: NuGetCommand@2
#       displayName: 'NuGet 发布'
#       inputs:
#         command: push
#         nuGetFeedType: external
#         publishFeedCredentials: nuget.org
#         packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'

#     - task: NuGetCommand@2
#       displayName: 'MyGet 发布'
#       inputs:
#         command: push
#         nuGetFeedType: external
#         publishFeedCredentials: myget.org
#         packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
