{
  "api/Lett.Extensions.DataTableExtensions.html": {
    "href": "api/Lett.Extensions.DataTableExtensions.html",
    "title": "DataTableExtensions 类 | Lett.Extensions",
    "keywords": "DataTableExtensions 类 DataTable 扩展方法 继承 Object DataTableExtensions 继承成员 Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() 命名空间 : Lett.Extensions 程序集 : Lett.Extensions.dll 语法 public static class DataTableExtensions 方法 ColumnsEnumerable(DataTable) 获取DataColumn可枚举对象 声明 public static IEnumerable<DataColumn> ColumnsEnumerable(this DataTable this) 参数 类型 名称 描述 DataTable this 返回 类型 描述 IEnumerable < DataColumn > 示例 var rs = dataTable.ColumnsEnumerable(); 异常 类型 条件 ArgumentNullException DataColumn 为空 InvalidCastException FirstRow(DataTable) 获取首行 声明 public static DataRow FirstRow(this DataTable this) 参数 类型 名称 描述 DataTable this 返回 类型 描述 DataRow 示例 dataTable.FirstRow(); 异常 类型 条件 DataTableException 当前DataTable没有行 GetColumnDataType(DataTable, Int32) 获取Column的数据类型 声明 public static Type GetColumnDataType(this DataTable this, int index) 参数 类型 名称 描述 DataTable this Int32 index 索引 返回 类型 描述 Type 示例 var columnType = dataTable.GetColumnDataType(-1); 异常 类型 条件 DataTableException index 索引超出了数组范围 ArgumentException GetColumnDataType(DataTable, String) 获取Column的数据类型 声明 public static Type GetColumnDataType(this DataTable this, string columnName) 参数 类型 名称 描述 DataTable this String columnName 列名 返回 类型 描述 Type 示例 var columnType = dt.GetColumnDataType(\"columnName\"); 异常 类型 条件 DataTableException DataTable中不包含 columnName } ArgumentException HasRows(DataTable) 是否存在数据行 声明 public static bool HasRows(this DataTable this) 参数 类型 名称 描述 DataTable this 返回 类型 描述 Boolean 示例 dataTable.HasRows(); LastRow(DataTable) 获取末行 声明 public static DataRow LastRow(this DataTable this) 参数 类型 名称 描述 DataTable this 返回 类型 描述 DataRow 示例 dataTable.LastRow(); 异常 类型 条件 DataTableException 当前DataTable没有行 RowsEnumerable(DataTable) 获取DataRow可枚举对象 声明 public static IEnumerable<DataRow> RowsEnumerable(this DataTable this) 参数 类型 名称 描述 DataTable this 返回 类型 描述 IEnumerable < DataRow > 示例 var rs = dataTable.RowsEnumerable(); 异常 类型 条件 ArgumentNullException DataRow 为空 InvalidCastException ToEntityList<T>(DataTable) 转换为实体列表 使用 DataRow 中的值，填充 目标类型 的 FieldInfo 与 PropertyInfo 匹配规则: FieldInfo .Name 或 PropertyInfo .Name 与 ColumnName 相同 声明 public static List<T> ToEntityList<T>(this DataTable this) where T : class, new() 参数 类型 名称 描述 DataTable this 返回 类型 描述 List <T> 返回 List< T > 类型参数 名称 描述 T 目标类型 示例 var rs = dataTable.ToEntityList<TestClass1>(); 异常 类型 条件 ArgumentNullException this . DataRow 为空 InvalidCastException FieldAccessException TargetException ArgumentException MethodAccessException TargetInvocationException ArgumentNullException this . RowsEnumerable(DataTable) 为空"
  },
  "api/Lett.Extensions.IEnumerableExtensions.html": {
    "href": "api/Lett.Extensions.IEnumerableExtensions.html",
    "title": "IEnumerableExtensions 类 | Lett.Extensions",
    "keywords": "IEnumerableExtensions 类 IEnumerable 扩展方法 继承 Object IEnumerableExtensions 继承成员 Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() 命名空间 : Lett.Extensions 程序集 : Lett.Extensions.dll 语法 public static class IEnumerableExtensions 方法 ContainsAll<T>(IEnumerable<T>, IEnumerable<T>) 是否包含全部元素 声明 public static bool ContainsAll<T>(this IEnumerable<T> this, IEnumerable<T> items) 参数 类型 名称 描述 IEnumerable <T> this IEnumerable <T> items 需要进行判断的元素集合 返回 类型 描述 Boolean this 或 items 为空，返回 false 类型参数 名称 描述 T 集合中元素的类型 示例 var arr = new[] {\"aa\", \"bb\"}; var match = new[] {\"aa\"}; var match2 = new[] {\"aa\", \"bb\"}; var rs = arr.ContainsAll(match); // false; var rs2 = arr.ContainsAll(match2); // true; ContainsAny<T>(IEnumerable<T>, IEnumerable<T>) 是否包含任一元素 声明 public static bool ContainsAny<T>(this IEnumerable<T> this, IEnumerable<T> items) 参数 类型 名称 描述 IEnumerable <T> this IEnumerable <T> items 需要进行判断的元素集合 返回 类型 描述 Boolean this 或 items 为空，返回 false 类型参数 名称 描述 T 集合中元素的类型 示例 var arr = new[] {\"aa\", \"bb\"}; var match = new[] {\"aa\"}; var rs = arr.ContainsAny(match); // true IsNullOrEmpty<T>(IEnumerable<T>) 是否空或空集合 声明 public static bool IsNullOrEmpty<T>(this IEnumerable<T> this) 参数 类型 名称 描述 IEnumerable <T> this 返回 类型 描述 Boolean 类型参数 名称 描述 T 集合中元素的类型 示例 var arr = new[] {\"aa\", \"bb\"}; var rs = arr.IsNullOrEmpty(); // false var arr2 = new string[] { }; var rs2 = arr.IsNullOrEmpty(); // true"
  },
  "api/Lett.Extensions.BooleanExtensions.html": {
    "href": "api/Lett.Extensions.BooleanExtensions.html",
    "title": "BooleanExtensions 类 | Lett.Extensions",
    "keywords": "BooleanExtensions 类 bool 扩展方法 继承 Object BooleanExtensions 继承成员 Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() 命名空间 : Lett.Extensions 程序集 : Lett.Extensions.dll 语法 public static class BooleanExtensions 方法 IfFalse(Boolean, Action) 结果为 False 时，执行方法 声明 public static void IfFalse(this bool this, Action action) 参数 类型 名称 描述 Boolean this 结果 Action action 执行的方法 示例 var condition = true; var rs = \"\"; condition.IfFalse(() => rs = \"it is false\"); // rs == \"\"; var condition = false; var rs = \"\"; condition.IfFalse(() => rs = \"it is false\"); // rs == \"it is false\"; IfFalse<T>(Boolean, T) 结果为 False 时，返回参数 结果为 True 时，返回参数类型默认值 声明 public static T IfFalse<T>(this bool this, T result) 参数 类型 名称 描述 Boolean this 结果 T result 参数 返回 类型 描述 T 类型参数 名称 描述 T 参数类型 示例 var condition = true; var rs = \"\"; rs = condition.IfFalse(\"it is false\"); // rs == null == default(string) var condition = false; var rs = \"\"; rs = condition.IfFalse(\"it is false\"); // rs == \"it is false\" IfTrue(Boolean, Action) 结果为 True 时，执行方法 声明 public static void IfTrue(this bool this, Action action) 参数 类型 名称 描述 Boolean this Action action 执行的方法 示例 var condition = true; var rs = \"\"; condition.IfTrue(() => rs = \"it is true\"); // rs == \"it is true\"; var condition = false; var rs = \"\"; condition.IfTrue(() => rs = \"it is true\"); // rs == \"\"; IfTrue<T>(Boolean, T) 结果为 True 时，返回参数 结果为 False 时，返回参数类型默认值 声明 public static T IfTrue<T>(this bool this, T result) 参数 类型 名称 描述 Boolean this T result 参数 返回 类型 描述 T 类型参数 名称 描述 T 参数类型 示例 var condition = true; var rs = \"\"; rs = condition.IfTrue(\"it is true\"); // rs == \"it is true\"; var condition = false; var rs = \"\"; rs = condition.IfTrue(\"it is true\"); // rs == null == default(string)"
  },
  "api/Lett.Extensions.DataRowExtensions.html": {
    "href": "api/Lett.Extensions.DataRowExtensions.html",
    "title": "DataRowExtensions 类 | Lett.Extensions",
    "keywords": "DataRowExtensions 类 DataRow 扩展方法 继承 Object DataRowExtensions 继承成员 Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() 命名空间 : Lett.Extensions 程序集 : Lett.Extensions.dll 语法 public static class DataRowExtensions 方法 Cell<T>(DataRow, String) 获取当前行中某个列的值 声明 public static T Cell<T>(this DataRow this, string columnName) where T : IConvertible 参数 类型 名称 描述 DataRow this String columnName 列名 返回 类型 描述 T columnName 不存在 或 转换失败，返回 default( T ) 类型参数 名称 描述 T 目标类型，约束为 IConvertible 示例 var rs = dataRow.Cell<string>(\"columnName\"); // if fail return default(string) Cell<T>(DataRow, String, T) 获取当前行中某个列的值 声明 public static T Cell<T>(this DataRow this, string columnName, T defaultValue) where T : IConvertible 参数 类型 名称 描述 DataRow this String columnName 列名 T defaultValue 默认值 返回 类型 描述 T columnName 不存在 或 转换失败，返回 defaultValue 类型参数 名称 描述 T 目标类型，约束为 IConvertible 示例 var rs = dataRow.Cell(\"columnName\", \"abc\"); // if fail return \"abc\" Cell<T>(DataRow, String, Func<T>) 获取当前行中某个列的值 声明 public static T Cell<T>(this DataRow this, string columnName, Func<T> func) where T : IConvertible 参数 类型 名称 描述 DataRow this String columnName 列名 Func <T> func 返回 类型 描述 T columnName 不存在 或 转换失败，返回 func 类型参数 名称 描述 T 目标类型，约束为 IConvertible 示例 var rs = dataRow.Cell<string>(\"columnName\", () => \"func return value\"); ToEntity<T>(DataRow) 转换为实体 使用 DataRow 中的值，填充 目标类型 的 FieldInfo 与 PropertyInfo 匹配规则: FieldInfo .Name 或 PropertyInfo .Name 与 ColumnName 相同 声明 public static T ToEntity<T>(this DataRow this) where T : class, new() 参数 类型 名称 描述 DataRow this 返回 类型 描述 T 目标对象 T 类型参数 名称 描述 T 目标类型 示例 dataTable.Rows[0].ToEntity<TestClass1>(); 异常 类型 条件 FieldAccessException TargetException ArgumentException MethodAccessException TargetInvocationException"
  },
  "api/Lett.Extensions.Exceptions.DataTableException.html": {
    "href": "api/Lett.Extensions.Exceptions.DataTableException.html",
    "title": "DataTableException 类 | Lett.Extensions",
    "keywords": "DataTableException 类 继承 Object Exception DataTableException 实现 ISerializable 继承成员 Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) 命名空间 : Lett.Extensions.Exceptions 程序集 : Lett.Extensions.dll 语法 public class DataTableException : Exception, ISerializable 构造函数 DataTableException(String) 声明 public DataTableException(string message) 参数 类型 名称 描述 String message 实现 System.Runtime.Serialization.ISerializable 扩展方法 ObjectExtensions.IsDBNull(Object) ObjectExtensions.To<T>(Object) ObjectExtensions.To<T>(Object, Func<T>) ObjectExtensions.To<T>(Object, T) ObjectExtensions.As<T>(Object) ObjectExtensions.As<T>(Object, Func<T>) ObjectExtensions.As<T>(Object, T) ObjectExtensions.DeepClone<T>(T) ObjectExtensions.IsAssignableFrom(Object, Type)"
  },
  "api/Lett.Extensions.html": {
    "href": "api/Lett.Extensions.html",
    "title": "Lett.Extensions 命名空间 | Lett.Extensions",
    "keywords": "Lett.Extensions 命名空间 类 ArrayExtensions Array 扩展方法 BooleanExtensions bool 扩展方法 ByteExtensions Bytes 扩展方法 DataColumnCollectionExtensions DataColumnCollection 扩展方法 DataRowExtensions DataRow 扩展方法 DataTableExtensions DataTable 扩展方法 DateTimeExtensions DateTime 扩展方法 EnumExtensions Enum 扩展方法 ICollectionsExtensions ICollections 扩展方法 IEnumerableExtensions IEnumerable 扩展方法 IntExtensions Int 扩展方法 LongExtensions Long 扩展方法 ObjectExtensions Object 扩展方法 StringExtensions string 扩展方法 TypeExtensions type 扩展方法"
  },
  "api/Lett.Extensions.DateTimeExtensions.html": {
    "href": "api/Lett.Extensions.DateTimeExtensions.html",
    "title": "DateTimeExtensions 类 | Lett.Extensions",
    "keywords": "DateTimeExtensions 类 DateTime 扩展方法 继承 Object DateTimeExtensions 继承成员 Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() 命名空间 : Lett.Extensions 程序集 : Lett.Extensions.dll 语法 public static class DateTimeExtensions 方法 EndOfDay(DateTime) 获取 DateTime 的结束 (year-month-day 23:59:59.999) 声明 public static DateTime EndOfDay(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 DateTime 返回一个新的 DateTime 示例 var dt = new DateTime(2019, 4, 1, 1, 2, 3); var rs = dt.EndOfDay(); // rs == new DateTime(2019, 4, 1, 23, 59, 59, 999); 异常 类型 条件 ArgumentOutOfRangeException EndOfWeek(DateTime, DayOfWeek) 获取本周结束的 DateTime (year-month-day 23:59:59.999) 声明 public static DateTime EndOfWeek(this DateTime this, DayOfWeek startOfWeek) 参数 类型 名称 描述 DateTime this DayOfWeek startOfWeek 设置每周的起始 返回 类型 描述 DateTime 返回一个新的 DateTime 示例 var dt2 = new DateTime(2019, 4, 1, 1, 2, 3); var rs2 = dt.EndOfWeek(DayOfWeek.Friday); // 2019-04-04 23:59:59.999 异常 类型 条件 ArgumentOutOfRangeException GetTotalDays(DateTime) 获取时间戳的日表示 声明 public static double GetTotalDays(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 Double 示例 var dt = new DateTime(2019, 4, 1, 11, 11, 11); dt.GetTotalDays(); // 17987.466099537036 GetTotalHours(DateTime) 获取时间戳的小时表示 声明 public static double GetTotalHours(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 Double 示例 var dt = new DateTime(2019, 4, 1, 11, 11, 11); dt.GetTotalHours(); // 431699.18638888886 GetTotalMilliseconds(DateTime) 获取时间戳的毫秒表示 声明 public static double GetTotalMilliseconds(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 Double 示例 var dt = new DateTime(2019, 4, 1, 11, 11, 11); dt.GetTotalMilliseconds(); // 1554117071000 GetTotalMinutes(DateTime) 获取时间戳的分钟表示 声明 public static double GetTotalMinutes(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 Double 示例 var dt = new DateTime(2019, 4, 1, 11, 11, 11); dt.GetTotalMinutes(); // 25901951.183333334 GetTotalSeconds(DateTime) 获取时间戳的秒表示 声明 public static double GetTotalSeconds(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 Double 示例 var dt = new DateTime(2019, 4, 1, 11, 11, 11); dt.GetTotalSeconds(); // 1554117071 SetTime(DateTime, Int32, Int32, Int32, Int32) 设置DateTime的time部分 声明 public static DateTime SetTime(this DateTime this, int hour, int minute, int second, int millisecond = 0) 参数 类型 名称 描述 DateTime this Int32 hour 小时 (0-23) Int32 minute 分钟 (0-59) Int32 second 秒 (0-59) Int32 millisecond 毫秒 (0-999) 默认0 返回 类型 描述 DateTime 返回一个新的 DateTime 示例 var dt2 = new DateTime(2019, 4, 1, 1, 2, 3); var rs2 = dt2.SetTime(23, 11, 11, 999); 异常 类型 条件 ArgumentOutOfRangeException hour 、 minute 和 second 参数描述了一个无法表示的日期时间 ArgumentOutOfRangeException millisecond 的有效值不在0和999之间 StartOfDay(DateTime) 获取 DateTime 的开始 (year-month-day 00:00:00.000) 声明 public static DateTime StartOfDay(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 DateTime 返回一个新的 DateTime 示例 var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); var rs = dt.StartOfDay(); // rs == new DateTime(2019, 4, 1, 0, 0, 0, 000) 异常 类型 条件 ArgumentOutOfRangeException StartOfWeek(DateTime, DayOfWeek) 获取本周开始 DateTime (year-month-day 00:00:00.000) 声明 public static DateTime StartOfWeek(this DateTime this, DayOfWeek startOfWeek) 参数 类型 名称 描述 DateTime this DayOfWeek startOfWeek 设置每周的起始 返回 类型 描述 DateTime 返回一个新的 DateTime 示例 var dt = new DateTime(2019, 4, 1, 1, 2, 3); var rs = dt.StartOfWeek(DayOfWeek.Sunday); // 2019-03-31 00:00:00 异常 类型 条件 ArgumentOutOfRangeException ToString_Base(DateTime) 格式化为 yyyy-MM-dd HH:mm:ss 声明 public static string ToString_Base(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 String 示例 var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_Base(); // \"2019-04-01 21:11:11\" 异常 类型 条件 FormatException ArgumentOutOfRangeException ToString_Day(DateTime) 格式化为 yyyy-MM-dd 声明 public static string ToString_Day(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 String 示例 var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_Day(); // \"2019-04-01\" 异常 类型 条件 FormatException ArgumentOutOfRangeException ToString_Full(DateTime) 格式化为 yyyy-MM-dd HH:mm:ss.fffffff 声明 public static string ToString_Full(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 String 示例 var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_Full(); // \"2019-04-01 21:11:11.1230000\" 异常 类型 条件 FormatException ArgumentOutOfRangeException ToString_Month(DateTime) 格式化为 yyyy-MM 声明 public static string ToString_Month(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 String 示例 var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_Month(); // \"2019-04\" 异常 类型 条件 FormatException ArgumentOutOfRangeException ToString_ShortDay(DateTime) 格式化为 yy-M-d 声明 public static string ToString_ShortDay(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 String 示例 var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_ShortDay(); // \"19-4-1\" 异常 类型 条件 FormatException ArgumentOutOfRangeException ToString_ShortMonth(DateTime) 格式化为 yy-M 声明 public static string ToString_ShortMonth(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 String 示例 var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_ShortMonth(); // \"19-4\" 异常 类型 条件 FormatException ArgumentOutOfRangeException ToString_ShortTime(DateTime) 格式化为 hh:mm:ss tt eg. 11:23:02 PM 声明 public static string ToString_ShortTime(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 String 示例 var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_ShortTime(); // \"09:11:11 PM\" 异常 类型 条件 FormatException ArgumentOutOfRangeException ToString_ShortYear(DateTime) 格式化为 yy 声明 public static string ToString_ShortYear(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 String 示例 var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_ShortYear(); // \"19\" 异常 类型 条件 FormatException ArgumentOutOfRangeException ToString_Time(DateTime) 格式化为 HH:mm:ss 声明 public static string ToString_Time(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 String 示例 var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_Time(); // \"21:11:11\" 异常 类型 条件 FormatException ArgumentOutOfRangeException ToString_Year(DateTime) 格式化为 yyyy 声明 public static string ToString_Year(this DateTime this) 参数 类型 名称 描述 DateTime this 返回 类型 描述 String 示例 var dt = new DateTime(2019, 4, 1, 21, 11, 11, 123); dt.ToString_Year(); // \"2019\" 异常 类型 条件 FormatException ArgumentOutOfRangeException"
  },
  "api/Lett.Extensions.ICollectionsExtensions.html": {
    "href": "api/Lett.Extensions.ICollectionsExtensions.html",
    "title": "ICollectionsExtensions 类 | Lett.Extensions",
    "keywords": "ICollectionsExtensions 类 ICollections 扩展方法 继承 Object ICollectionsExtensions 继承成员 Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() 命名空间 : Lett.Extensions 程序集 : Lett.Extensions.dll 语法 public static class ICollectionsExtensions 方法 AddIfNotContains<T>(ICollection<T>, T) 如果不包含，则添加 声明 public static void AddIfNotContains<T>(this ICollection<T> this, T item) 参数 类型 名称 描述 ICollection <T> this T item 匹配项 类型参数 名称 描述 T 集合中元素的类型 示例 var list = new List<string> {\"aa\", \"bb\"}; list.AddIfNotContains(\"cc\"); list.AddIfNotContains(\"aa\"); // {\"aa\", \"bb\", \"cc\"} 异常 类型 条件 NotSupportedException this AddIfNotContains<T>(ICollection<T>, ICollection<T>) 如果不包含，则添加 声明 public static void AddIfNotContains<T>(this ICollection<T> this, ICollection<T> items) 参数 类型 名称 描述 ICollection <T> this ICollection <T> items 匹配项集合 类型参数 名称 描述 T 集合中元素的类型 示例 var list = new List<string> {\"aa\", \"bb\"}; var appendList = new[] {\"cc\", \"aa\"}; list.AddIfNotContains(appendList); // {\"aa\", \"bb\", \"cc\"} 异常 类型 条件 NotSupportedException this"
  },
  "api/Lett.Extensions.Exceptions.html": {
    "href": "api/Lett.Extensions.Exceptions.html",
    "title": "Lett.Extensions.Exceptions 命名空间 | Lett.Extensions",
    "keywords": "Lett.Extensions.Exceptions 命名空间 类 DataTableException"
  },
  "api/Lett.Extensions.ArrayExtensions.html": {
    "href": "api/Lett.Extensions.ArrayExtensions.html",
    "title": "ArrayExtensions 类 | Lett.Extensions",
    "keywords": "ArrayExtensions 类 Array 扩展方法 继承 Object ArrayExtensions 继承成员 Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() 命名空间 : Lett.Extensions 程序集 : Lett.Extensions.dll 语法 public static class ArrayExtensions 方法 ClearAll(Array) 将所有元素设置为元素类型的默认值 声明 public static void ClearAll(this Array this) 参数 类型 名称 描述 Array this 示例 var s = new[] {\"aaa\", \"bbb\"}; s.ClearAll(); // s.Length == 2; // s[0] == null; var s = new[] {11, 22}; s.ClaerAll(); // s.Length == 2; // s[0] == 0; // s[1] == 1; ClearAll<T>(T[]) 将所有元素设置为元素类型的默认值 声明 public static void ClearAll<T>(this T[] this) 参数 类型 名称 描述 T[] this 类型参数 名称 描述 T 数组的元素类型 示例 var s = new[] {\"aaa\", \"bbb\"}; s.ClearAll(); // s.Length == 2; // s[0] == null; var s = new[] {11, 22}; s.ClaerAll(); // s.Length == 2; // s[0] == 0; // s[1] == 1; ContainsIndex(Array, Int32) 是否包含索引 声明 public static bool ContainsIndex(this Array this, int index) 参数 类型 名称 描述 Array this Int32 index 索引 返回 类型 描述 Boolean 示例 var s = new[] {\"aaa\", \"bbb\"}; s.ContainsIndex(0); // true s.ContainsIndex(2); // false 异常 类型 条件 ArgumentNullException 数组为空 ContainsIndex<T>(T[], Int32) 是否包含索引 声明 public static bool ContainsIndex<T>(this T[] this, int index) 参数 类型 名称 描述 T[] this Int32 index 索引 返回 类型 描述 Boolean 类型参数 名称 描述 T 数组的元素类型 示例 var s = new[] {\"aaa\", \"bbb\"}; s.ContainsIndex(0); // true s.ContainsIndex(2); // false 异常 类型 条件 ArgumentNullException 数组为空 Find<T>(T[], Predicate<T>) 返回数组中的第一个匹配元素 声明 public static T Find<T>(this T[] this, Predicate<T> match) 参数 类型 名称 描述 T[] this Predicate <T> match 用于定义要搜索的元素的条件的谓词 返回 类型 描述 T 类型参数 名称 描述 T 数组的元素类型 示例 var rs = new[] {\"a\", \"aa\", \"bb\", \"aaa\"}.Find(s => s.Length == 2); // \"aa\" 异常 类型 条件 ArgumentNullException match is null. FindAll<T>(T[], Predicate<T>) 返回数组中所有匹配的元素 声明 public static T[] FindAll<T>(this T[] this, Predicate<T> match) 参数 类型 名称 描述 T[] this Predicate <T> match 用于定义要搜索的元素的条件的谓词 返回 类型 描述 T[] 类型参数 名称 描述 T 数组的元素类型 示例 var rs = new[] {\"a\", \"aa\", \"bb\", \"aaa\"}.FindAll(s => s.Length == 2); // [\"aa\",\"bb\"] 异常 类型 条件 ArgumentNullException match is null. FindIndex<T>(T[], Int32, Int32, Predicate<T>) 返回数组中的第一个匹配元素的索引 声明 public static int FindIndex<T>(this T[] this, int startIndex, int count, Predicate<T> match) 参数 类型 名称 描述 T[] this Int32 startIndex 开始的索引 Int32 count 要搜索的部分中的元素数 Predicate <T> match 用于定义要搜索的元素的条件的谓词 返回 类型 描述 Int32 类型参数 名称 描述 T 数组的元素类型 示例 var rs = new[] {\"a\", \"aa\", \"bb\", \"aaa\"}.FindIndex(1, 2, ss => ss.Length == 2); // 1 异常 类型 条件 ArgumentNullException this 或 match 为空. ArgumentOutOfRangeException FindIndex<T>(T[], Int32, Predicate<T>) 返回数组中的第一个匹配元素的索引 声明 public static int FindIndex<T>(this T[] this, int startIndex, Predicate<T> match) 参数 类型 名称 描述 T[] this Int32 startIndex 开始的索引 Predicate <T> match 用于定义要搜索的元素的条件的谓词 返回 类型 描述 Int32 类型参数 名称 描述 T 数组的元素类型 示例 var rs = new[] {\"a\", \"aa\", \"bb\", \"aaa\"}.FindIndex(2, ss => ss.Length == 2); // 2 异常 类型 条件 ArgumentNullException this 或 match 为空. ArgumentOutOfRangeException FindIndex<T>(T[], Predicate<T>) 返回数组中的第一个匹配元素的索引 声明 public static int FindIndex<T>(this T[] this, Predicate<T> match) 参数 类型 名称 描述 T[] this Predicate <T> match 用于定义要搜索的元素的条件的谓词 返回 类型 描述 Int32 类型参数 名称 描述 T 数组的元素类型 示例 var rs = new[] {\"a\", \"aa\", \"bb\", \"aaa\"}.FindIndex(s => s.Length == 2); // 1 异常 类型 条件 ArgumentNullException this 或 match 为空. FindLast<T>(T[], Predicate<T>) 返回数组中的最后一个匹配元素 声明 public static T FindLast<T>(this T[] this, Predicate<T> match) 参数 类型 名称 描述 T[] this Predicate <T> match 用于定义要搜索的元素的条件的谓词 返回 类型 描述 T 类型参数 名称 描述 T 数组的元素类型 示例 var rs = new[] {\"a\", \"aa\", \"bb\", \"aaa\"}.FindLast(s => s.Length == 2); // \"bb\" 异常 类型 条件 ArgumentNullException match is null. FindLastIndex<T>(T[], Int32, Int32, Predicate<T>) 返回数组中的最后一个匹配元素的索引 声明 public static int FindLastIndex<T>(this T[] this, int startIndex, int count, Predicate<T> match) 参数 类型 名称 描述 T[] this Int32 startIndex 开始的索引 Int32 count 要搜索的部分中的元素数 Predicate <T> match 用于定义要搜索的元素的条件的谓词 返回 类型 描述 Int32 类型参数 名称 描述 T 数组的元素类型 示例 var rs = new[] {\"a\", \"aa\", \"b\", \"bb\", \"bbb\", \"c\"}.FindLastIndex(4,3, s1 => s1.StartsWith(\"b\")); // 4 异常 类型 条件 ArgumentNullException this 或 match 为空. ArgumentOutOfRangeException FindLastIndex<T>(T[], Int32, Predicate<T>) 返回数组中的最后一个匹配元素的索引 声明 public static int FindLastIndex<T>(this T[] this, int startIndex, Predicate<T> match) 参数 类型 名称 描述 T[] this Int32 startIndex 开始的索引 Predicate <T> match 用于定义要搜索的元素的条件的谓词 返回 类型 描述 Int32 类型参数 名称 描述 T 数组的元素类型 示例 var rs = new[] {\"aa\", \"aaa\", \"bb\", \"bb\", \"bbb\", \"ccc\"}.FindLastIndex(1, s1 => s1.StartsWith(\"a\")); // 1 异常 类型 条件 ArgumentNullException this 或 match 为空. ArgumentOutOfRangeException FindLastIndex<T>(T[], Predicate<T>) 返回数组中的最后一个匹配元素的索引 声明 public static int FindLastIndex<T>(this T[] this, Predicate<T> match) 参数 类型 名称 描述 T[] this Predicate <T> match 用于定义要搜索的元素的条件的谓词 返回 类型 描述 Int32 类型参数 名称 描述 T 数组的元素类型 示例 var rs = new[] {\"aa\", \"aaa\", \"bb\", \"bb\", \"bbb\", \"ccc\"}.FindLastIndex(s1 => s1.StartsWith(\"b\")); // 4 异常 类型 条件 ArgumentNullException this 或 match 为空 ForEach<T>(T[], Action<T>) 对每个元素执行指定操作 声明 public static void ForEach<T>(this T[] this, Action<T> action) 参数 类型 名称 描述 T[] this Action <T> action 指定操作 T: 数组元素 类型参数 名称 描述 T 数组的元素类型 示例 var s = new[] {\"aa\", \"aaa\", \"bb\", \"bb\", \"bbb\", \"ccc\"}; var rs = new List<string>(); s.ForEach(e => rs.Add(e)); // rs.Count == 6; // rs[0] == \"aa\"; ForEach<T>(T[], Action<Int32, T>) 对每个元素执行指定操作 声明 public static void ForEach<T>(this T[] this, Action<int, T> action) 参数 类型 名称 描述 T[] this Action < Int32 , T> action 指定操作 int: 数组元素的索引 T: 数组元素 类型参数 名称 描述 T 数组的元素类型 示例 var s = new[] {\"aa\", \"aaa\", \"bb\", \"bb\", \"bbb\", \"ccc\"}; var rs = new List<string>(); s.ForEach((index, e) => rs2.Add($\"{index}-{e}\")); // rs.Count == 6; // rs[0] == \"0-aa\"; Reverse(Array) 反转数组中元素的顺序 声明 public static void Reverse(this Array this) 参数 类型 名称 描述 Array this 示例 var s = new[] {\"a\", \"A\", \"B\", \"b\", \"0\"}; s.Reverse(); // {\"0\", \"b\", \"B\", \"A\", \"a\"} 异常 类型 条件 ArgumentNullException this RankException Reverse(Array, Int32, Int32) 反转数组中元素的顺序 声明 public static void Reverse(this Array this, int index, int length) 参数 类型 名称 描述 Array this Int32 index 要反转的部分的起始索引 Int32 length 要反转的部分中的元素数 示例 var s = new[] {\"a\", \"A\", \"B\", \"b\", \"0\"}; s.Reverse(2, 3); // {\"a\", \"A\", \"0\", \"b\", \"B\"} 异常 类型 条件 ArgumentNullException this ArgumentOutOfRangeException RankException ArgumentException Reverse<T>(T[]) 反转数组中元素的顺序 声明 public static void Reverse<T>(this T[] this) 参数 类型 名称 描述 T[] this 类型参数 名称 描述 T 数组的元素类型 示例 var s = new[] {\"a\", \"A\", \"B\", \"b\", \"0\"}; s.Reverse(); // {\"0\", \"b\", \"B\", \"A\", \"a\"} 异常 类型 条件 ArgumentNullException this RankException Reverse<T>(T[], Int32, Int32) 反转数组中元素的顺序 声明 public static void Reverse<T>(this T[] this, int index, int length) 参数 类型 名称 描述 T[] this 当前 Array 泛型接口 Int32 index 要反转的部分的起始索引 Int32 length 要反转的部分中的元素数 类型参数 名称 描述 T 示例 var s = new[] {\"a\", \"A\", \"B\", \"b\", \"0\"}; s.Reverse(2, 3); // {\"a\", \"A\", \"0\", \"b\", \"B\"} 异常 类型 条件 ArgumentNullException this ArgumentOutOfRangeException RankException ArgumentException Sort(Array) 排序 声明 public static void Sort(this Array this) 参数 类型 名称 描述 Array this 当前 Array 示例 var s = new[] {\"a\", \"b\", \"c\", \"d\"}; s.Sort(); // {\"a\", \"b\", \"c\", \"d\"} 异常 类型 条件 ArgumentNullException this RankException InvalidOperationException Sort(Array, IComparer) 排序 声明 public static void Sort(this Array this, IComparer comparer) 参数 类型 名称 描述 Array this IComparer comparer 比较元素时使用的 IComparer<T> 泛型接口实现 如果为 null，则使用每个元素的 IComparable<T> 泛型接口实现 示例 var s = new[] {\"aa\", \"AA\", \"A\"}; s.Sort(StringComparer.Ordinal); // {\"A\", \"AA\", \"a\"} 异常 类型 条件 ArgumentNullException this RankException InvalidOperationException ArgumentException Sort(Array, Int32, Int32) 排序 声明 public static void Sort(this Array this, int index, int length) 参数 类型 名称 描述 Array this Int32 index 排序范围的起始索引 Int32 length 排序范围内的元素数 示例 var s = new[] {\"aa\", \"AA\", \"A\"}; s.Sort(StringComparer.CurrentCulture); // {\"A\", \"aa\", \"AA\"} 异常 类型 条件 ArgumentNullException this ArgumentOutOfRangeException index length ArgumentException index length InvalidOperationException Sort(Array, Int32, Int32, IComparer) 排序 声明 public static void Sort(this Array this, int index, int length, IComparer comparer) 参数 类型 名称 描述 Array this Int32 index 排序范围的起始索引 Int32 length 排序范围内的元素数 IComparer comparer 比较元素时使用的 IComparer<T> 泛型接口实现 如果为 null，则使用每个元素的 IComparable<T> 泛型接口实现 示例 var s = new[] {\"BB\", \"aa\", \"CCC\", \"ccc\", \"00\"}; s.Sort(2, 3, StringComparer.CurrentCulture); // {\"BB\", \"aa\", \"00\", \"ccc\", \"CCC\"} 异常 类型 条件 ArgumentNullException this RankException this ArgumentOutOfRangeException index length ArgumentException index length InvalidOperationException Sort<T>(T[]) 排序 声明 public static void Sort<T>(this T[] this) 参数 类型 名称 描述 T[] this 类型参数 名称 描述 T 数组的元素类型 示例 var s = new[] {\"a\", \"b\", \"c\", \"d\"}; s.Sort(); // {\"a\", \"b\", \"c\", \"d\"} 异常 类型 条件 ArgumentNullException this RankException InvalidOperationException Sort<T>(T[], IComparer) 排序 声明 public static void Sort<T>(this T[] this, IComparer comparer) 参数 类型 名称 描述 T[] this IComparer comparer 比较元素时使用的 IComparer<T> 泛型接口实现 如果为 null，则使用每个元素的 IComparable<T> 泛型接口实现 类型参数 名称 描述 T 数组的元素类型 示例 var s = new[] {\"aa\", \"AA\", \"A\"}; s.Sort(StringComparer.Ordinal); // {\"A\", \"AA\", \"a\"} 异常 类型 条件 ArgumentNullException this RankException InvalidOperationException ArgumentException Sort<T>(T[], Int32, Int32) 排序 声明 public static void Sort<T>(this T[] this, int index, int length) 参数 类型 名称 描述 T[] this Int32 index 排序范围的起始索引 Int32 length 排序范围内的元素数 类型参数 名称 描述 T 数组的元素类型 示例 var s = new[] {\"aa\", \"AA\", \"A\"}; s.Sort(StringComparer.CurrentCulture); // {\"A\", \"aa\", \"AA\"} 异常 类型 条件 ArgumentNullException this ArgumentOutOfRangeException index length ArgumentException index length InvalidOperationException Sort<T>(T[], Int32, Int32, IComparer) 排序 声明 public static void Sort<T>(this T[] this, int index, int length, IComparer comparer) 参数 类型 名称 描述 T[] this Int32 index 排序范围的起始索引 Int32 length 排序范围内的元素数 IComparer comparer 比较元素时使用的 IComparer<T> 泛型接口实现；如果为 null，则使用每个元素的 IComparable<T> 泛型接口实现 类型参数 名称 描述 T 数组的元素类型 示例 var s = new[] {\"BB\", \"aa\", \"CCC\", \"ccc\", \"00\"}; s.Sort(2, 3, StringComparer.CurrentCulture); // {\"BB\", \"aa\", \"00\", \"ccc\", \"CCC\"} 异常 类型 条件 ArgumentNullException this RankException this ArgumentOutOfRangeException index length ArgumentException index length InvalidOperationException"
  },
  "api/Lett.Extensions.ObjectExtensions.html": {
    "href": "api/Lett.Extensions.ObjectExtensions.html",
    "title": "ObjectExtensions 类 | Lett.Extensions",
    "keywords": "ObjectExtensions 类 Object 扩展方法 继承 Object ObjectExtensions 继承成员 Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() 命名空间 : Lett.Extensions 程序集 : Lett.Extensions.dll 语法 public static class ObjectExtensions 方法 As<T>(Object) 对象强转换 声明 public static T As<T>(this object this) 参数 类型 名称 描述 Object this 返回 类型 描述 T 转换失败返回 default( T ) 类型参数 名称 描述 T 目标类型 示例 var s = new ClassA(); var rs = s.As<BaseClass>(); // if failed, rs == default(BaseClass) As<T>(Object, T) 对象强转换 声明 public static T As<T>(this object this, T defaultValue) 参数 类型 名称 描述 Object this T defaultValue 返回 类型 描述 T 转换失败返回 defaultValue 类型参数 名称 描述 T 目标类型 示例 var s = new ClassA(); s.As<BaseClass>(); As<T>(Object, Func<T>) 对象强转换 声明 public static T As<T>(this object this, Func<T> func) 参数 类型 名称 描述 Object this Func <T> func 返回 类型 描述 T 转换失败返回 func 类型参数 名称 描述 T 目标类型 示例 var s = new ClassA(); s.As<BaseClass>(() => new BaseClass()); DeepClone<T>(T) 深复制 声明 public static T DeepClone<T>(this T this) 参数 类型 名称 描述 T this 返回 类型 描述 T 类型参数 名称 描述 T 泛型约束 需要支持序列化 Serializable 示例 [Serializable] private class MyClass { public string Name { get; set; } } var obj = new MyClass{Name = \"aa\"}; var rs = obj.DeepClone(); // obj.Name == rs.Name // obj != rs 异常 类型 条件 ArgumentException this 需要支持序列化 Serializable IsAssignableFrom(Object, Type) 指定类型的实例是否能分配给当前类型实例 声明 public static bool IsAssignableFrom(this object this, Type targetType) 参数 类型 名称 描述 Object this Type targetType 指定类型 返回 类型 描述 Boolean IsDBNull(Object) 是否DBNull 声明 public static bool IsDBNull(this object this) 参数 类型 名称 描述 Object this 返回 类型 描述 Boolean 示例 var value = DBNull.Value; value.IsDBNull(); // true To<T>(Object) 对象转换 声明 public static T To<T>(this object this) where T : IConvertible 参数 类型 名称 描述 Object this 返回 类型 描述 T 转换失败则返回 default( T ) 类型参数 名称 描述 T 泛型约束 IConvertible 示例 var intVar = 11; intVar.To<string>(); // \"11\" var dateTimeStr = \"2018-01-01 23:59:59\"; var rs = dateTimeStr.To<DateTime>(); // rs = new DateTime(2018,1, 1, 23, 59, 59) To<T>(Object, T) 对象转换 声明 public static T To<T>(this object this, T defaultValue) where T : IConvertible 参数 类型 名称 描述 Object this T defaultValue 返回 类型 描述 T 失败则返回 defaultValue 类型参数 名称 描述 T 泛型约束 IConvertible 示例 var dateTimeStr = \"2018-01-01 23:59:59xxxxxxxx\"; // will be fail var rs = dateTimeStr.To<DateTime>(new DateTime(2019, 4, 1)); // rs == new DateTime(2019, 4, 1) To<T>(Object, Func<T>) 对象转换 声明 public static T To<T>(this object this, Func<T> func) where T : IConvertible 参数 类型 名称 描述 Object this Func <T> func 返回 类型 描述 T 转换失败则返回 func 类型参数 名称 描述 T 泛型约束 IConvertible 示例 var dateTimeStr = \"2018-01-01 23:59:59xxxxxxxx\"; // will be fail var rs = dateTimeStr.To<DateTime>(() => new DateTime(2019,4,1)); // rs == new DateTime(2019, 4, 1) var dateTimeStr = \"2018-01-01 23:59:59\"; // will be success var rs = dateTimeStr.To<DateTime>(() => new DateTime(2019,4,1)); // rs == new DateTime(2018, 1, 1, 23, 59, 59)"
  },
  "api/Lett.Extensions.IntExtensions.html": {
    "href": "api/Lett.Extensions.IntExtensions.html",
    "title": "IntExtensions 类 | Lett.Extensions",
    "keywords": "IntExtensions 类 Int 扩展方法 继承 Object IntExtensions 继承成员 Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() 命名空间 : Lett.Extensions 程序集 : Lett.Extensions.dll 语法 public static class IntExtensions 方法 GetEnumDescription(Int32, Type) 获取对应枚举的描述 声明 public static string GetEnumDescription(this int this, Type enumType) 参数 类型 名称 描述 Int32 this Type enumType 枚举类型 返回 类型 描述 String 获取失败 返回null 示例 enum MyEnum { [System.ComponentModel.Description(\"这里是EnumValue0的说明\")] EnumValue0 = 0, } 0.GetEnumDescription(typeof(MyEnum); // \"这里是EnumValue0的说明\" 异常 类型 条件 ArgumentNullException enumType 为空 ArgumentException enumType 不是枚举类型 ArgumentNullException ArgumentException NotSupportedException AmbiguousMatchException TypeLoadException IsEven(Int32) 是否偶数 声明 public static bool IsEven(this int this) 参数 类型 名称 描述 Int32 this 返回 类型 描述 Boolean 示例 0.IsEven(); // true IsInRange(Int32, Int32, Int32) 是否在指定范围内 声明 public static bool IsInRange(this int this, int min, int max) 参数 类型 名称 描述 Int32 this Int32 min 最小值 Int32 max 最大值 返回 类型 描述 Boolean 示例 (-1).IsInRange(0, 10); // false 10.IsInRange(0, 10); // true IsOdd(Int32) 是否奇数 声明 public static bool IsOdd(this int this) 参数 类型 名称 描述 Int32 this 返回 类型 描述 Boolean 示例 (-1).IsOdd(); // true Times(Int32, Action) 执行次数操作，次数基于 this 声明 public static void Times(this int this, Action action) 参数 类型 名称 描述 Int32 this Action action 执行的操作 示例 var rs = 0; 10.Times(() => rs += 1); // rs == 10 异常 类型 条件 ArgumentOutOfRangeException 执行次数 this 小于0 Times(Int32, Action<Int32>) 执行次数操作，次数基于 this 声明 public static void Times(this int this, Action<int> action) 参数 类型 名称 描述 Int32 this Action < Int32 > action 执行的操作(参数是从0开始的 index) 示例 var rs2 = 0; 10.Times(i => rs2 += i); // rs2 == 45 异常 类型 条件 ArgumentOutOfRangeException 执行次数 this 小于0"
  },
  "api/Lett.Extensions.StringExtensions.html": {
    "href": "api/Lett.Extensions.StringExtensions.html",
    "title": "StringExtensions 类 | Lett.Extensions",
    "keywords": "StringExtensions 类 string 扩展方法 继承 Object StringExtensions 继承成员 Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() 命名空间 : Lett.Extensions 程序集 : Lett.Extensions.dll 语法 public static class StringExtensions 方法 Base64Decode(String) 进行 BASE6 4解码 使用 UTF8 声明 public static string Base64Decode(this string this) 参数 类型 名称 描述 String this 返回 类型 描述 String 转换失败返回 null 示例 var base64 = \"QUJDRA==\"; base64.Base64Decode(); // \"ABCD\" Base64Encode(String) 进行 BASE64 编码 使用 UTF8 声明 public static string Base64Encode(this string this) 参数 类型 名称 描述 String this 返回 类型 描述 String 转换失败返回 null 示例 var str1 = \"ABCD\"; str1.Base64Encode(); // \"QUJDRA==\" ContainsAll(String, IEnumerable<String>, StringComparison) 是否全部包含 声明 public static bool ContainsAll(this string this, IEnumerable<string> values, StringComparison comparisonType = StringComparison.CurrentCultureIgnoreCase) 参数 类型 名称 描述 String this IEnumerable < String > values 需要进行判断的字符串集合 StringComparison comparisonType 字符串比较规则 默认值: CurrentCultureIgnoreCase 返回 类型 描述 Boolean 示例 var a = \"aaabbbccc\"; var b = new[] {\"aaa\", \"bbb\"}; a.ContainsAll(b); // true 异常 类型 条件 ArgumentNullException ArgumentException ContainsAny(String, IEnumerable<String>, StringComparison) 是否包含任意一个 声明 public static bool ContainsAny(this string this, IEnumerable<string> values, StringComparison comparisonType = StringComparison.CurrentCultureIgnoreCase) 参数 类型 名称 描述 String this IEnumerable < String > values 需要进行判断的字符串集合 StringComparison comparisonType 字符串比较规则 默认值: CurrentCultureIgnoreCase 返回 类型 描述 Boolean 示例 var a = \"aaabbbccc\"; var b = new[] {\"a\", \"dd\", \"eee\"}; a.ContainsAny(b); // true Format(String, Object[]) 格式化 声明 public static string Format(this string this, params object[] args) 参数 类型 名称 描述 String this Object [] args 返回 类型 描述 String 示例 var tmp = \"{0}-{1}\"; tmp.Format(new[]{\"aaa\",\"bbb\"}); // \"aaa-bbb\" 异常 类型 条件 ArgumentNullException FormatException IgnoreCaseEquals(String, String) 忽略大小写比较 使用 CurrentCultureIgnoreCase 声明 public static bool IgnoreCaseEquals(this string this, string value) 参数 类型 名称 描述 String this String value 需要进行比较的字符串 返回 类型 描述 Boolean 示例 \"aaa\".IgnoreCaseEquals(\"AaA\"); // true IsEmail(String) 是否Email 声明 public static bool IsEmail(this string this) 参数 类型 名称 描述 String this 返回 类型 描述 Boolean 示例 \"abc@qqq.com\".IsEmail(); // true \"abc@qqq#.com\".IsEmail(); // false 异常 类型 条件 ArgumentNullException 字符串为空 ArgumentNullException ArgumentException RegexMatchTimeoutException IsLike(String, String) 使用通配符比较字符串是否相似 通配符 * 特殊字符 用 \\ 转义 正则匹配时，使用 Singleline 声明 public static bool IsLike(this string this, string pattern) 参数 类型 名称 描述 String this String pattern 通配符表达式，为 null 时返回 false 返回 类型 描述 Boolean this 为 null 时 返回 false pattern 为 null 时 返回 false 示例 var test1 = \"abcdefg\\r\\nabcdefghijk\"; test1.IsLike(\"abc*\"); // true test1.IsLike(\"a*\"); // true test1.IsLike(\"*ijk\"); // true test1.IsLike(\"abc*fg*\"); // true 异常 类型 条件 ArgumentOutOfRangeException ArgumentNullException FormatException ArgumentException RegexMatchTimeoutException IsLower(String) 是否全部小写 声明 public static bool IsLower(this string this) 参数 类型 名称 描述 String this 返回 类型 描述 Boolean 示例 \"abcddd\".IsLower(); // true; \"abDD\".IsLower(); // false IsNullOrEmpty(String) 是否 null 或 string.Empty 声明 public static bool IsNullOrEmpty(this string this) 参数 类型 名称 描述 String this 返回 类型 描述 Boolean 示例 \" \".IsNullOrEmpty(); // false \"\".IsNullOrEmpty(); // true IsNullOrWhiteSpace(String) 是否null或空白 声明 public static bool IsNullOrWhiteSpace(this string this) 参数 类型 名称 描述 String this 返回 类型 描述 Boolean 示例 \" \".IsNullOrWhiteSpace(); // true \"\\r\".IsNullOrWhiteSpace(); // true IsUpper(String) 是否全部大写 声明 public static bool IsUpper(this string this) 参数 类型 名称 描述 String this 返回 类型 描述 Boolean 示例 \"ABC\".IsUpper(); // true \"ABd\".IsUpper(); // false IsUrl(String) 是否URL 声明 public static bool IsUrl(this string this) 参数 类型 名称 描述 String this 返回 类型 描述 Boolean 示例 \"http://sdf.com\".IsUrl(); // true \"http://sdf.c.dddd.cccc.saaa.com\".IsUrl(); // true \"www.sdf.com\".IsUrl(); // false Left(String, Int32) 从左侧返回指定长度的字符串 声明 public static string Left(this string this, int length) 参数 类型 名称 描述 String this Int32 length 指定长度 不能小于 0 返回 类型 描述 String 示例 \"1234567890\".Left(3); // \"123\" 异常 类型 条件 ArgumentOutOfRangeException length 不能小于 0 RegexIsMatch(String, String, RegexOptions) 正则表达式 - 是否匹配 声明 public static bool RegexIsMatch(this string this, string pattern, RegexOptions regexOption = RegexOptions.None) 参数 类型 名称 描述 String this String pattern 正则表达式 RegexOptions regexOption 正则表达式选项，默认值： None 返回 类型 描述 Boolean 示例 var source = \"abcdefg\\r\\nabcdefghijk\"; source.RegexIsMatch(@\"^abc.*\\r$\", RegexOptions.Multiline); // true 异常 类型 条件 ArgumentException ArgumentNullException ArgumentOutOfRangeException RegexMatchTimeoutException RegexMatch(String, String, RegexOptions) 正则表达式 - 单个匹配对象 声明 public static Match RegexMatch(this string this, string pattern, RegexOptions regexOption = RegexOptions.None) 参数 类型 名称 描述 String this String pattern 正则表达式 RegexOptions regexOption 正则表达式选项，默认值： None 返回 类型 描述 Match 单个匹配对象 示例 var str = \"aaaabaaaabaaaa\"; var match = str.RegexMatch(\"b\"); // match.Success == true; 异常 类型 条件 ArgumentException ArgumentNullException ArgumentOutOfRangeException RegexMatchTimeoutException RegexMatches(String, String, RegexOptions) 正则表达式 - 所有匹配对象 声明 public static MatchCollection RegexMatches(this string this, string pattern, RegexOptions regexOption = RegexOptions.None) 参数 类型 名称 描述 String this 源字符串 String pattern 正则表达式 RegexOptions regexOption 正则表达式选项，默认值： None 返回 类型 描述 MatchCollection 所有匹配对象 示例 var str = \"aaaabaaaabaaaa\"; var matches = str.RegexMatches(@\"aaaab\"); // matches.Count == 2 异常 类型 条件 ArgumentException ArgumentNullException ArgumentOutOfRangeException RegexReplace(String, String, String, RegexOptions) 正则表达式 - 替换字符串 声明 public static string RegexReplace(this string this, string pattern, string replacement, RegexOptions regexOption = RegexOptions.None) 参数 类型 名称 描述 String this 源字符串 String pattern 正则表达式 String replacement 替换字符串 RegexOptions regexOption 正则表达式选项，默认值： None 返回 类型 描述 String RegexReplace(String, String, MatchEvaluator) 正则表达式 - 替换字符串 声明 public static string RegexReplace(this string this, string pattern, MatchEvaluator evaluator) 参数 类型 名称 描述 String this 源字符串 String pattern 正则表达式 MatchEvaluator evaluator 委托表示的方法返回的字符串 返回 类型 描述 String 示例 var rs2 = test1.RegexReplace(@\"\\.\", match => match.Value + \"@\"); // \"aaaa.@bbbb.@cccc\" 异常 类型 条件 ArgumentException ArgumentNullException RegexMatchTimeoutException RegexSplit(String, String, RegexOptions) 正则表达式 - 拆分字符串 声明 public static string[] RegexSplit(this string this, string pattern, RegexOptions regexOption = RegexOptions.None) 参数 类型 名称 描述 String this 源字符串 String pattern 正则表达式 RegexOptions regexOption 正则表达式选项，默认值： None 返回 类型 描述 String [] 示例 var str = \"aaaa.bbbb.cccc\"; var rs = str.RegexSplit(@\"\\.\"); // rs.Count == 3 异常 类型 条件 ArgumentException ArgumentNullException ArgumentOutOfRangeException RegexMatchTimeoutException Right(String, Int32) 从右侧返回指定长度的字符串 声明 public static string Right(this string this, int length) 参数 类型 名称 描述 String this Int32 length 指定长度 不能小于 0 返回 类型 描述 String 示例 \"1234567890\".Right(3); // \"890\" 异常 类型 条件 ArgumentOutOfRangeException length 不能小于 0 ToBytes(String, Encoding) 转换为 byte 数组 声明 public static byte[] ToBytes(this string this, Encoding encoding = null) 参数 类型 名称 描述 String this Encoding encoding 编码格式 默认为 UTF8 返回 类型 描述 Byte [] 示例 var source = \"abcd\"; var rs = source.ToBytes(Encoding.Unicode); var rs2 = source.ToBytes(); // use Encoding.UTF8 异常 类型 条件 ArgumentNullException EncoderFallbackException ToXmlDocument(String) 转换为 XmlDocument 声明 public static XmlDocument ToXmlDocument(this string this) 参数 类型 名称 描述 String this 返回 类型 描述 XmlDocument 示例 var source = \"<item><name>wrench</name></item>\"; var rs = source.ToXmlDocument(); 异常 类型 条件 XmlException"
  },
  "api/Lett.Extensions.ByteExtensions.html": {
    "href": "api/Lett.Extensions.ByteExtensions.html",
    "title": "ByteExtensions 类 | Lett.Extensions",
    "keywords": "ByteExtensions 类 Bytes 扩展方法 继承 Object ByteExtensions 继承成员 Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() 命名空间 : Lett.Extensions 程序集 : Lett.Extensions.dll 语法 public static class ByteExtensions 方法 ToString(Byte[], Encoding) 转换为字符串 声明 public static string ToString(this byte[] this, Encoding encoding) 参数 类型 名称 描述 Byte [] this Encoding encoding 编码格式 为空时，默认Encoding.UTF8 返回 类型 描述 String 示例 bytes.ToString(Encoding.UTF8); 异常 类型 条件 ArgumentException this ArgumentNullException this DecoderFallbackException"
  },
  "api/Lett.Extensions.LongExtensions.html": {
    "href": "api/Lett.Extensions.LongExtensions.html",
    "title": "LongExtensions 类 | Lett.Extensions",
    "keywords": "LongExtensions 类 Long 扩展方法 继承 Object LongExtensions 继承成员 Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() 命名空间 : Lett.Extensions 程序集 : Lett.Extensions.dll 语法 public static class LongExtensions 方法 IsEven(Int64) 是否偶数 声明 public static bool IsEven(this long this) 参数 类型 名称 描述 Int64 this 返回 类型 描述 Boolean 示例 0L.IsEven(); // true IsInRange(Int64, Int64, Int64) 是否在指定范围内 声明 public static bool IsInRange(this long this, long min, long max) 参数 类型 名称 描述 Int64 this Int64 min 最小值 Int64 max 最大值 返回 类型 描述 Boolean 示例 (-1L).IsInRange(0, 10); // false 10L.IsInRange(0, 10); // true IsOdd(Int64) 是否奇数 声明 public static bool IsOdd(this long this) 参数 类型 名称 描述 Int64 this 返回 类型 描述 Boolean 示例 (-1L).IsOdd(); // true Times(Int64, Action) 执行次数操作，次数基于 this 声明 public static void Times(this long this, Action action) 参数 类型 名称 描述 Int64 this Action action 执行的操作 示例 var rs = 0; 10L.Times(() => rs += 1); // rs == 10 异常 类型 条件 ArgumentOutOfRangeException 执行次数 this 小于0 Times(Int64, Action<Int64>) 执行次数操作，次数基于 this 声明 public static void Times(this long this, Action<long> action) 参数 类型 名称 描述 Int64 this Action < Int64 > action 执行的操作(参数是从0开始的 index) 示例 var rs2 = 0; 10L.Times(i => rs2 += i); // rs2 == 45 异常 类型 条件 ArgumentOutOfRangeException 执行次数 this 小于0"
  },
  "api/Lett.Extensions.TypeExtensions.html": {
    "href": "api/Lett.Extensions.TypeExtensions.html",
    "title": "TypeExtensions 类 | Lett.Extensions",
    "keywords": "TypeExtensions 类 type 扩展方法 继承 Object TypeExtensions 继承成员 Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() 命名空间 : Lett.Extensions 程序集 : Lett.Extensions.dll 语法 public static class TypeExtensions 方法 HasProperty(Type, String) 是否包含 PropertyInfo (可访问的 PropertyInfo ) 声明 public static bool HasProperty(this Type this, string propertyName) 参数 类型 名称 描述 Type this String propertyName 属性名，忽略大小写 返回 类型 描述 Boolean 示例 public class Class1 { public string PropertyA { get; set; } private string PropertyB { get; set; } } 异常 类型 条件 ArgumentNullException ArgumentException"
  },
  "api/Lett.Extensions.EnumExtensions.html": {
    "href": "api/Lett.Extensions.EnumExtensions.html",
    "title": "EnumExtensions 类 | Lett.Extensions",
    "keywords": "EnumExtensions 类 Enum 扩展方法 继承 Object EnumExtensions 继承成员 Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() 命名空间 : Lett.Extensions 程序集 : Lett.Extensions.dll 语法 public static class EnumExtensions 方法 GetDescription(Enum) 获取枚举描述 需要在枚举中加入 Description 属性 示例 private enum MyEnum { [Description(\"这里是EnumValue0的描述\")] EnumValue0 = 0, } 声明 public static string GetDescription(this Enum this) 参数 类型 名称 描述 Enum this 返回 类型 描述 String 获取失败时 返回null 示例 var rs = MyEnum.EnumValue0.GetDescription(); // rs == \"这里是EnumValue0的描述\" 异常 类型 条件 ArgumentNullException ArgumentException NotSupportedException AmbiguousMatchException TypeLoadException"
  },
  "api/Lett.Extensions.DataColumnCollectionExtensions.html": {
    "href": "api/Lett.Extensions.DataColumnCollectionExtensions.html",
    "title": "DataColumnCollectionExtensions 类 | Lett.Extensions",
    "keywords": "DataColumnCollectionExtensions 类 DataColumnCollection 扩展方法 继承 Object DataColumnCollectionExtensions 继承成员 Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() 命名空间 : Lett.Extensions 程序集 : Lett.Extensions.dll 语法 public static class DataColumnCollectionExtensions 方法 AddRange(DataColumnCollection, IEnumerable<String>) 批量增加 DataColumn 声明 public static void AddRange(this DataColumnCollection this, IEnumerable<string> columnNames) 参数 类型 名称 描述 DataColumnCollection this IEnumerable < String > columnNames 列名集合 示例 var dt = new DataTable(); var colNames = new[] {\"Field1\", \"Field2\", \"Field3\"}; dt.Columns.AddRange(colNames); // dt.Columns == {\"Field1\", \"Field2\", \"Field3\"} 异常 类型 条件 DuplicateNameException columnNames 有特殊列名"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | Lett.Extensions",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "version_notes.html": {
    "href": "version_notes.html",
    "title": "Version Notes | Lett.Extensions",
    "keywords": "Version Notes 0.2.0 (2019-05-21) Features / 新增功能 增加 IEnumerable<T> 扩展方法： ContainsAny(IEnumerable<T> items) 是否包含任一元素 ContainsAll(IEnumerable<T> items) 是否包含全部元素 增加 DateTime 扩展方法: SetTime(int hour, int minute, int second, int millisecond = 0) 设置 DateTime 的 time 部分 StartOfDay() 获取 DateTime 的开始 (year-month-day 00:00:00.000) EndOfDay() 获取 DateTime 的结束 (year-month-day 23:59:59.999) StartOfWeek() 获取本周开始的 DateTime (year-month-day 00:00:00.000) EndOfWeek() 获取本周结束的 DateTime (year-month-day 23:59:59.999) Changed / 变更 移除 DateTime 扩展方法: RemoveTimePart() 移除时间部分 0.1.9 (2019-05-18) Features / 新增功能 增加 DateTime 扩展方法: RemoveTimePart() 移除时间部分 增加 Array 扩展方法 ClearAll() 全部清除 ContainsIndex(int index) 是否包含索引 Sort() 排序 Reverse() 反转 Find() 返回数组中的第一个匹配元素 FindLast() 返回数组中的最后一个匹配元素 FindAll() 返回数组中所有匹配的元素 FindIndex() 返回数组中的第一个匹配元素的索引 FindLastIndex() 返回数组中的最后一个匹配元素的索引 ForEach() 对指定数组的每个元素执行指定操作 0.1.8 (2019-05-13) Features / 新增功能 增加 string 扩展方法: ToBytes(Encoding encoding = null) 转换为 byte 数组 IsLike(string pattern) *通配符比较是否相似 (特殊字符 用 \\ 转义) RegexIsMatch(string pattern) 正则表达式 - 是否匹配 RegexMatches(string pattern) 正则表达式匹配 - 所有匹配对象 RegexMatch(string pattern) 正则表达式匹配 - 单个匹配对象 RegexSplit(string pattern) 正则表达式拆分字符串 RegexReplace(string pattern, string replacement) 正则表达式替换字符串 RegexReplace(string pattern, MatchEvaluator evaluator) 正则表达式替换字符串 增加 byte[] 扩展方法: ToString(Encoding encoding) 转换为字符串 增加 ICollection 扩展方法: AddIfNotContains<T>(@this, T item) 如果不包含，则添加 AddIfNotContains<T>(ICollection<T> items) 如果不包含，则添加 增加 bool 扩展方法: IfTrue(Action action) 结果为 True 时，执行方法 IfTrue(T result) 结果为 True 时，返回参数 (结果为 False 时，返回参数类型默认值) IfFalse(Action action) 结果为 False 时，执行方法 IfTrue(T result) 结果为 False 时，返回参数 (结果为 True 时，返回参数类型默认值) 增加 int 扩展方法: IsEven() 是否偶数 IsOdd() 是否奇数 Times(Action action) 执行次数操作，次数基于原 int 值 Times(Action<int> action) 执行次数操作，次数基于原 int 值 IsInRange(int min, int max) 是否在指定范围内 增加 long 扩展方法: IsEven() 是否偶数 IsOdd() 是否奇数 Times(Action action) 执行次数操作，次数基于原 int 值 Times(Action<long> action) 执行次数操作，次数基于原 int 值 IsInRange(long min, long max) 是否在指定范围内 Changed / 变更 对扩展方法类名进行规范重命名 统一命名空间 Lett.Extensions.Exceptions IEnumerableExtensions IEnumerable 扩展方法 DataColumnCollectionExtensions DataColumnCollection 扩展方法 DataRowExtensions DataRow 扩展方法 DataTableExtensions DataTable 扩展方法 DateTimeExtensions DateTime 扩展方法 EnumExtensions Enum 扩展方法 IntExtensions int 扩展方法 ObjectExtensions object 扩展方法 StringExtensions string 扩展方法 TypeExtensions type 扩展方法 类名变更： LettExtensionsDataTableException -> DataTableException 0.1.7 (2019-04-28) Features / 新增功能 增加 System.String 拓展方法 Format(object[] args) 格式化 Left(int length) 从左侧返回指定长度的字符串 Right(int length) 从右侧返回指定长度的字符串 0.1.6 (2019-04-25) Features / 新增功能 增加 String.IsNullOrWhiteSpace() 是否 null 或空白 增加 String.ContainsAll() 是否全部包含，默认不区分大小写 增加 String.ContainsAny() 是否包含任意一个，默认不区分大小写 0.1.5 (2019-04-24) Features / 新增功能 增加 DataTable DataRow 转换实体方法 增加 DataColumnCollectionTest.AddRange 方法 获取 DataColumn 可枚举对象 ColumnsEnumerable() 获取 Column 的数据类型 GetColumnDataType(string columnName) 获取 Column 的数据类型 GetColumnDataType(int index) Changed / 变更 DataRow.Cell<T>() 系列方法，泛型约定调整为 实现了 IConvertible 接口的类型 Object.To<T>() 方法的泛型约定调整为 实现了 IConvertible 接口的类型 实现了 IConvertible 接口的类型 如：Boolean, Byte, Char, DateTime, System.DBNull, Decimal, Double, System.Enum, Int16, Int32, Int64, SByte, Single, String, UInt16, UInt32, UInt64 等 0.1.4 (2019-04-14) Features / 新增功能 增加 Object.IsDBNull 方法 Refactored / 优化重构 调整 Int32.GetEnumDescription()方法位置，使用无感知 X.X.X (2019-04-13) Features / 新增功能 Changed / 变更 Fixed / 修复 Removed / 删除 Deprecated / 即将删除 Refactored / 优化重构"
  },
  "index.html": {
    "href": "index.html",
    "title": "Popular .Net Core / .Net Framework extension methods | Lett.Extensions",
    "keywords": "Popular .Net Core / .Net Framework extension methods Version Notes | View in Github | View in Nuget Support Platform 提示 Lett.Extensions Library is build at .Net Standard 2.0 You can find more information about .Net Standard from [here] Platform Support platform minimum version .NET Standard 2.0 .NET Core 2.0 .NET Framework 4.6.1 Mono 5.4 Xamarin.iOS 10.14 Xamarin.Mac 3.8 Xamarin.Android 8.0 Universal Windows Platform 10.0.16299 Unity 2018.1 Installation Package Manager Nuget cli .Net cli PM> Install-Package Lett.Extensions > nuget install Lett.Extensions > dotnet add package Lett.Extensions Ducuments ArrayExtensions BooleanExtensions ByteExtensions ByteExtensions DataRowExtensions DataTableExtensions More ... Lisence MIT © viacooky"
  }
}